package cif.reportes.clases;

import cif.manage.User;
import cif.reportes.ReportQuerys;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Raisel
 */
public class C_1_6_ArbolesAislados_Model extends AbstractCritReport implements IReportModel
{
    public TableModel getModel(User user, Integer anno, boolean desglose) throws SQLException
    {
       return getReportModel(user, anno, desglose);
    }

    @Override
    protected TableModel getModel_AP()
    {
        String sql = getSQLReplacement(ReportQuerys.SQL_1_5_AP, user.getIdEntidad(), anno.toString());
        db.executeQueryUperCase(sql);

        return db;
    }

    @Override
    protected TableModel getModel_US()
    {
       String sql = getSQLReplacement(ReportQuerys.SQL_1_5_US, user.getIdEntidad(), anno.toString());
       db.executeQueryUperCase(sql);

       return db;
    }

    @Override
    protected TableModel getModel_EFI()
    {
           DefaultTableModel deftm = new DefaultTableModel();
           String sql = getSQLReplacement(ReportQuerys.SQL_1_5_EFI_Subgrupo, user.getIdEntidad(), anno.toString());

           db.executeQueryUperCase(sql);
           if(!db.isEmpty())
           {
            deftm = new javax.swing.table.DefaultTableModel(db.getAllRows(), db.getColumnNames());

            sql = getSQLReplacement(ReportQuerys.SQL_1_5_EFI_TOTAL, user.getIdEntidad(), anno.toString());
            db.executeQuery(sql);

            Object []row = new String []{"TOTAL","","","", db.getValueAt(0,1).toString(), db.getValueAt(0,2).toString(),
                                         db.getValueAt(0,3).toString(), db.getValueAt(0,4).toString()};
            deftm.addRow(row);
           }
           
        return deftm;
    }

    @Override
    protected TableModel getModel_MUN()
    {
           String prov = "";
           String mun = "";
           String areaTalDef = "";
           String areaQuemDef = "";
           String areaTal = "";
           String areaEst = "";
           String tipoEntidad = "";
           Object []row = null;
           Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME, ReportQuerys.TIPOENTIDAD_COLUMN_NAME,
                                              ReportQuerys.AREA_TALADA_DEF_COLUMN_NAME, ReportQuerys.AREA_QUEM_DEF_COLUMN_NAME, ReportQuerys.AREA_TALADA_COLUMN_NAME,
                                              ReportQuerys.AREA_ESTABLECIDA_COLUMN_NAME};
           DefaultTableModel deftm= new DefaultTableModel(columNames, 0);
           Double TotAreaTalDef = new Double(0);
           Double TotAreaQuemDef = new Double(0);
           Double TotAreaTal = new Double(0);
           Double TotAreaEst = new Double(0);

           String sql = getSQLReplacement(ReportQuerys.SQL_1_5_MUN_SubGrupoUS, user.getIdEntidad(), anno.toString());
           db.executeQuery(sql);
           if(!db.isEmpty())
           {
               prov = db.getValueAt(0,0).toString();
               mun = db.getValueAt(0,1).toString();
               areaTalDef = db.getValueAt(0,2).toString();
               areaQuemDef = db.getValueAt(0,3).toString();
               areaTal = db.getValueAt(0,4).toString();
               areaEst = db.getValueAt(0,5).toString();

               tipoEntidad = "Unidades Silvícolas";
               row = new String []{prov, mun, tipoEntidad, areaTalDef, areaQuemDef, areaTal, areaEst};
               deftm.addRow(row);

               TotAreaTalDef += Double.parseDouble(areaTalDef);
               TotAreaQuemDef += Double.parseDouble(areaQuemDef);
               TotAreaTal += Double.parseDouble(areaTal);
               TotAreaEst += Double.parseDouble(areaEst);
           }

           sql = getSQLReplacement(ReportQuerys.SQL_1_5_MUN_SubGrupoAP, user.getIdEntidad(), anno.toString());
           db.executeQuery(sql);
           if(!db.isEmpty())
           {
               prov = db.getValueAt(0,0).toString();
               mun = db.getValueAt(0,1).toString();
               areaTalDef = db.getValueAt(0,2).toString();
               areaQuemDef = db.getValueAt(0,3).toString();
               areaTal = db.getValueAt(0,4).toString();
               areaEst = db.getValueAt(0,5).toString();

               tipoEntidad = "Áreas protegidas";
               row = new String []{prov, mun, tipoEntidad, areaTalDef, areaQuemDef, areaTal, areaEst};
               deftm.addRow(row);

               TotAreaTalDef += Double.parseDouble(areaTalDef);
               TotAreaQuemDef += Double.parseDouble(areaQuemDef);
               TotAreaTal += Double.parseDouble(areaTal);
               TotAreaEst += Double.parseDouble(areaEst);
           }

           sql = getSQLReplacement(ReportQuerys.SQL_1_5_MUN_SubGrupoOTROS, user.getIdEntidad(), anno.toString());
           db.executeQuery(sql);
           if(!db.isEmpty())
           {
               prov = db.getValueAt(0,0).toString();
               mun = db.getValueAt(0,1).toString();
               areaTalDef = db.getValueAt(0,2).toString();
               areaQuemDef = db.getValueAt(0,3).toString();
               areaTal = db.getValueAt(0,4).toString();
               areaEst = db.getValueAt(0,5).toString();

               tipoEntidad = "Otros";
               row = new String []{prov, mun, tipoEntidad, areaTalDef, areaQuemDef, areaTal, areaEst};
               deftm.addRow(row);

               TotAreaTalDef += Double.parseDouble(areaTalDef);
               TotAreaQuemDef += Double.parseDouble(areaQuemDef);
               TotAreaTal += Double.parseDouble(areaTal);
               TotAreaEst += Double.parseDouble(areaEst);
           }

           row = new String []{"TOTAL", "", "", TotAreaTalDef.toString(), TotAreaQuemDef.toString(), TotAreaTal.toString(), TotAreaEst.toString()};
           deftm.addRow(row);

           return deftm;
    }

    @Override
    protected TableModel getModel_PROV()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME,
                                          ReportQuerys.AREA_TALADA_DEF_COLUMN_NAME, ReportQuerys.AREA_QUEM_DEF_COLUMN_NAME,
                                          ReportQuerys.AREA_TALADA_COLUMN_NAME, ReportQuerys.AREA_ESTABLECIDA_COLUMN_NAME};
       DefaultTableModel deftm= new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0,0,0,0);

       rowTotals = updateProvincia_MunRow(ReportQuerys.SQL_1_5_MUN_SubGrupoUS, user.getIdEntidad(), anno.toString(), deftm, rowTotals);

       rowTotals = updateProvincia_MunRow(ReportQuerys.SQL_1_5_MUN_SubGrupoAP, user.getIdEntidad(), anno.toString(), deftm, rowTotals);

       rowTotals = updateProvincia_MunRow(ReportQuerys.SQL_1_5_MUN_SubGrupoOTROS, user.getIdEntidad(), anno.toString(), deftm, rowTotals);

       row = new String []{"TOTAL", "", rowTotals.TotAreaTalDef.toString(), rowTotals.TotAreaQuemDef.toString(), rowTotals.TotAreaTal.toString(), rowTotals.TotAreaEst.toString()};
       deftm.addRow(row);

       return deftm;
    }

    @Override
    protected TableModel getModel_PROV_DESGLOSE()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME, ReportQuerys.TIPOENTIDAD_COLUMN_NAME,
                                              ReportQuerys.AREA_TALADA_DEF_COLUMN_NAME, ReportQuerys.AREA_QUEM_DEF_COLUMN_NAME, ReportQuerys.AREA_TALADA_COLUMN_NAME,
                                              ReportQuerys.AREA_ESTABLECIDA_COLUMN_NAME};
       DefaultTableModel deftm= new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0,0,0,0);

       rowTotals = updateProvincia_DesgloseRow(ReportQuerys.SQL_1_5_MUN_SubGrupoUS, user.getIdEntidad(), anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_UNIDADES_SILVICOLAS);

       rowTotals = updateProvincia_DesgloseRow(ReportQuerys.SQL_1_5_MUN_SubGrupoAP, user.getIdEntidad(), anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_AREAS_PROTEGIDAS);

       rowTotals = updateProvincia_DesgloseRow(ReportQuerys.SQL_1_5_MUN_SubGrupoOTROS, user.getIdEntidad(), anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_OTROS);

       row = new String []{"TOTAL", "", "", rowTotals.TotAreaTalDef.toString(), rowTotals.TotAreaQuemDef.toString(), rowTotals.TotAreaTal.toString(), rowTotals.TotAreaEst.toString()};
       deftm.addRow(row);

       return deftm;
    }

    @Override
    protected TableModel getModel_NAC()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.AREA_TALADA_DEF_COLUMN_NAME,
                                          ReportQuerys.AREA_QUEM_DEF_COLUMN_NAME, ReportQuerys.AREA_TALADA_COLUMN_NAME,
                                          ReportQuerys.AREA_ESTABLECIDA_COLUMN_NAME};
       DefaultTableModel deftm= new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0,0,0,0);

       rowTotals = updateProvinciaRow(ReportQuerys.SQL_1_5_PROV_SubGrupoUS, anno.toString(), deftm, rowTotals);

       rowTotals = updateProvinciaRow(ReportQuerys.SQL_1_5_PROV_SubGrupoAP, anno.toString(), deftm, rowTotals);

       rowTotals = updateProvinciaRow(ReportQuerys.SQL_1_5_PROV_SubGrupoOTROS, anno.toString(), deftm, rowTotals);

       row = new String []{"TOTAL", rowTotals.TotAreaTalDef.toString(), rowTotals.TotAreaQuemDef.toString(), rowTotals.TotAreaTal.toString(), rowTotals.TotAreaEst.toString()};
       deftm.addRow(row);

       return deftm;
    }

    @Override
    protected TableModel getModel_NAC_DESGLOSE()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME, ReportQuerys.TIPOENTIDAD_COLUMN_NAME,
                                              ReportQuerys.AREA_TALADA_DEF_COLUMN_NAME, ReportQuerys.AREA_QUEM_DEF_COLUMN_NAME, ReportQuerys.AREA_TALADA_COLUMN_NAME,
                                              ReportQuerys.AREA_ESTABLECIDA_COLUMN_NAME};
       DefaultTableModel deftm= new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0,0,0,0);

       rowTotals = updateDNF_DesgloseRow(ReportQuerys.SQL_1_5_MUN_SubGrupoUS, anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_UNIDADES_SILVICOLAS);

       rowTotals = updateDNF_DesgloseRow(ReportQuerys.SQL_1_5_MUN_SubGrupoAP, anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_AREAS_PROTEGIDAS);

       rowTotals = updateDNF_DesgloseRow(ReportQuerys.SQL_1_5_MUN_SubGrupoOTROS, anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_OTROS);

       row = new String []{"TOTAL", "", "", rowTotals.TotAreaTalDef.toString(), rowTotals.TotAreaQuemDef.toString(), rowTotals.TotAreaTal.toString(), rowTotals.TotAreaEst.toString()};
       deftm.addRow(row);

       return deftm;
    }

    private Totals updateProvincia_MunRow(String SqlPattern, String Entidad, String anno, DefaultTableModel dftm, Totals tot)
    {
       String prov = "";
       String mun = "";
       Double AreaTalDef = new Double(0);
       Double AreaQuemDef = new Double(0);
       Double AreaTal = new Double(0);
       Double AreaEst = new Double(0);
       Object []row = null;

       Double TotAreaTalDef = tot.TotAreaTalDef;
       Double TotAreaQuemDef = tot.TotAreaQuemDef;
       Double TotAreaTal = tot.TotAreaTal;
       Double TotAreaEst = tot.TotAreaEst;
      
       String sql = SqlPattern.replaceFirst("where municipios.id", "where provincias.id");
       sql = getSQLReplacement(sql, Entidad, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               boolean rowUpdated = false;
               
               prov = db.getValueAt(i,0).toString();
               mun = db.getValueAt(i,1).toString();
               AreaTalDef = Double.parseDouble(db.getValueAt(i,2).toString());
               AreaQuemDef = Double.parseDouble(db.getValueAt(i,3).toString());
               AreaTal = Double.parseDouble(db.getValueAt(i,4).toString());
               AreaEst = Double.parseDouble(db.getValueAt(i,5).toString());
               TotAreaTalDef += AreaTalDef;
               TotAreaQuemDef += AreaQuemDef;
               TotAreaTal += AreaTal;
               TotAreaEst += AreaEst;

               if(dftm.getRowCount() > 0)
               {
                    String tmMun = "";
                    for(int k=0; k<dftm.getRowCount(); k++)
                    {
                     tmMun = dftm.getValueAt(k,1).toString();
                     if(tmMun.equals(mun))
                     {
                      double tempAreaTalDef = Double.parseDouble(dftm.getValueAt(k,2).toString());
                      double tempAreaQuemDef = Double.parseDouble(dftm.getValueAt(k,3).toString());
                      double tempAreaTal = Double.parseDouble(dftm.getValueAt(k,4).toString());
                      double tempAreaEst = Double.parseDouble(dftm.getValueAt(k,5).toString());

                      dftm.setValueAt((tempAreaTalDef+AreaTalDef), k, 2);
                      dftm.setValueAt((tempAreaQuemDef+AreaQuemDef), k, 3);
                      dftm.setValueAt((tempAreaTal+AreaTal), k, 4);
                      dftm.setValueAt((tempAreaEst+AreaEst), k, 5);

                      rowUpdated = true;
                      break;
                     }
                    }
               }

               if(!rowUpdated)
               {
                row = new String []{prov, mun, AreaTalDef.toString(), AreaQuemDef.toString(), AreaTal.toString(), AreaEst.toString()};
                dftm.addRow(row);
               }
           }
       }

       return new Totals(TotAreaTalDef, TotAreaQuemDef, TotAreaTal, TotAreaEst);
   }

    private Totals updateProvinciaRow(String SqlPattern, String anno, DefaultTableModel dftm, Totals tot)
    {
       String prov = "";
       Double AreaTalDef = new Double(0);
       Double AreaQuemDef = new Double(0);
       Double AreaTal = new Double(0);
       Double AreaEst = new Double(0);
       Object []row = null;

       Double TotAreaTalDef = tot.TotAreaTalDef;
       Double TotAreaQuemDef = tot.TotAreaQuemDef;
       Double TotAreaTal = tot.TotAreaTal;
       Double TotAreaEst = tot.TotAreaEst;

       String sql = getSQLReplacement(SqlPattern, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               boolean rowUpdated = false;

               prov = db.getValueAt(i,0).toString();
               AreaTalDef = Double.parseDouble(db.getValueAt(i,1).toString());
               AreaQuemDef = Double.parseDouble(db.getValueAt(i,2).toString());
               AreaTal = Double.parseDouble(db.getValueAt(i,3).toString());
               AreaEst = Double.parseDouble(db.getValueAt(i,4).toString());
               TotAreaTalDef += AreaTalDef;
               TotAreaQuemDef += AreaQuemDef;
               TotAreaTal += AreaTal;
               TotAreaEst += AreaEst;

               if(dftm.getRowCount() > 0)
               {
                    String tmProv = "";
                    for(int k=0; k<dftm.getRowCount(); k++)
                    {
                     tmProv = dftm.getValueAt(k,0).toString();
                     if(tmProv.equals(prov))
                     {
                      double tempAreaTalDef = Double.parseDouble(dftm.getValueAt(k,1).toString());
                      double tempAreaQuemDef = Double.parseDouble(dftm.getValueAt(k,2).toString());
                      double tempAreaTal = Double.parseDouble(dftm.getValueAt(k,3).toString());
                      double tempAreaEst = Double.parseDouble(dftm.getValueAt(k,4).toString());

                      dftm.setValueAt((tempAreaTalDef+AreaTalDef), k, 1);
                      dftm.setValueAt((tempAreaQuemDef+AreaQuemDef), k, 2);
                      dftm.setValueAt((tempAreaTal+AreaTal), k, 3);
                      dftm.setValueAt((tempAreaEst+AreaEst), k, 4);

                      rowUpdated = true;
                      break;
                     }
                    }
               }

               if(!rowUpdated)
               {
                row = new String []{prov, AreaTalDef.toString(), AreaQuemDef.toString(), AreaTal.toString(), AreaEst.toString()};
                dftm.addRow(row);
               }
           }
       }

       return new Totals(TotAreaTalDef, TotAreaQuemDef, TotAreaTal, TotAreaEst);
    }

    private Totals updateProvincia_DesgloseRow(String SqlPattern, String Entidad, String anno, DefaultTableModel dftm, Totals tot, String tipoEntidad)
    {
       String prov = "";
       String mun = "";
       Double AreaTalDef = new Double(0);
       Double AreaQuemDef = new Double(0);
       Double AreaTal = new Double(0);
       Double AreaEst = new Double(0);
       Object []row = null;

       Double TotAreaTalDef = tot.TotAreaTalDef;
       Double TotAreaQuemDef = tot.TotAreaQuemDef;
       Double TotAreaTal = tot.TotAreaTal;
       Double TotAreaEst = tot.TotAreaEst;

       String sql = SqlPattern.replaceFirst("where municipios.id", "where provincias.id");
       sql = getSQLReplacement(sql, Entidad, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               boolean rowUpdated = false;
               int rowIndex = dftm.getRowCount();

               prov = db.getValueAt(i,0).toString();
               mun = db.getValueAt(i,1).toString();
               AreaTalDef = Double.parseDouble(db.getValueAt(i,2).toString());
               AreaQuemDef = Double.parseDouble(db.getValueAt(i,3).toString());
               AreaTal = Double.parseDouble(db.getValueAt(i,4).toString());
               AreaEst = Double.parseDouble(db.getValueAt(i,5).toString());
               TotAreaTalDef += AreaTalDef;
               TotAreaQuemDef += AreaQuemDef;
               TotAreaTal += AreaTal;
               TotAreaEst += AreaEst;

               if(dftm.getRowCount() > 0)
               {
                    String tmMun = "";
                    String tmEntidad = "";
                    for(int k=0; k<dftm.getRowCount(); k++)
                    {
                     tmMun = dftm.getValueAt(k,1).toString();
                     tmEntidad = dftm.getValueAt(k,2).toString();

                     if((tmMun.equals(mun)) && (tmEntidad.equals(tipoEntidad)))
                     {
                      double tempAreaTalDef = Double.parseDouble(dftm.getValueAt(k,3).toString());
                      double tempAreaQuemDef = Double.parseDouble(dftm.getValueAt(k,4).toString());
                      double tempAreaTal = Double.parseDouble(dftm.getValueAt(k,5).toString());
                      double tempAreaEst = Double.parseDouble(dftm.getValueAt(k,6).toString());

                      dftm.setValueAt((tempAreaTalDef+AreaTalDef), k, 3);
                      dftm.setValueAt((tempAreaQuemDef+AreaQuemDef), k, 4);
                      dftm.setValueAt((tempAreaTal+AreaTal), k, 5);
                      dftm.setValueAt((tempAreaEst+AreaEst), k, 6);

                      rowUpdated = true;
                      break;
                     }
                     else
                     if(tmMun.equals(mun))
                     {
                      rowIndex = k+1;
                      break;
                     }
                    }
               }

               if(!rowUpdated)
               {
                row = new String []{prov, mun, tipoEntidad, AreaTalDef.toString(), AreaQuemDef.toString(), AreaTal.toString(), AreaEst.toString()};
                dftm.insertRow(rowIndex, row);
               }
           }
       }

       return new Totals(TotAreaTalDef, TotAreaQuemDef, TotAreaTal, TotAreaEst);
    }

    private Totals updateDNF_DesgloseRow(String SqlPattern, String anno, DefaultTableModel dftm, Totals tot, String tipoEntidad)
    {
       String prov = "";
       String mun = "";
       Double AreaTalDef = new Double(0);
       Double AreaQuemDef = new Double(0);
       Double AreaTal = new Double(0);
       Double AreaEst = new Double(0);
       Object []row = null;

       Double TotAreaTalDef = tot.TotAreaTalDef;
       Double TotAreaQuemDef = tot.TotAreaQuemDef;
       Double TotAreaTal = tot.TotAreaTal;
       Double TotAreaEst = tot.TotAreaEst;

       String sql = SqlPattern.replaceFirst("municipios.id=':id' and", "");
       sql = getSQLReplacement(sql, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               prov = db.getValueAt(i,0).toString();
               mun = db.getValueAt(i,1).toString();
               AreaTalDef = Double.parseDouble(db.getValueAt(i,2).toString());
               AreaQuemDef = Double.parseDouble(db.getValueAt(i,3).toString());
               AreaTal = Double.parseDouble(db.getValueAt(i,4).toString());
               AreaEst = Double.parseDouble(db.getValueAt(i,5).toString());
               TotAreaTalDef += AreaTalDef;
               TotAreaQuemDef += AreaQuemDef;
               TotAreaTal += AreaTal;
               TotAreaEst += AreaEst;

               int rowIndex = getProvincia_Mun_Ent_RowIndex(prov, mun, tipoEntidad, dftm);

               if((rowIndex==0) && (dftm.getRowCount()<=0)) //agregar
               {
                row = new String []{prov, mun, tipoEntidad, AreaTalDef.toString(), AreaQuemDef.toString(), AreaTal.toString(), AreaEst.toString()};
                dftm.addRow(row);
               }
               else
               if(rowIndex >= 0) //insertar
               {
                row = new String []{prov, mun, tipoEntidad, AreaTalDef.toString(), AreaQuemDef.toString(), AreaTal.toString(), AreaEst.toString()};
                dftm.insertRow((rowIndex+1), row);
               }
               else     //actualizar
               {
                      rowIndex = rowIndex*(-1);
                      double tempAreaTalDef = Double.parseDouble(dftm.getValueAt(rowIndex,3).toString());
                      double tempAreaQuemDef = Double.parseDouble(dftm.getValueAt(rowIndex,4).toString());
                      double tempAreaTal = Double.parseDouble(dftm.getValueAt(rowIndex,5).toString());
                      double tempAreaEst = Double.parseDouble(dftm.getValueAt(rowIndex,6).toString());

                      dftm.setValueAt((tempAreaTalDef+AreaTalDef), rowIndex, 3);
                      dftm.setValueAt((tempAreaQuemDef+AreaQuemDef), rowIndex, 4);
                      dftm.setValueAt((tempAreaTal+AreaTal), rowIndex, 5);
                      dftm.setValueAt((tempAreaEst+AreaEst), rowIndex, 6);
               }
           }
       }

       return new Totals(TotAreaTalDef, TotAreaQuemDef, TotAreaTal, TotAreaEst);
    }
    
    class Totals
    {
      Double TotAreaTalDef = new Double(0);
      Double TotAreaQuemDef = new Double(0);
      Double TotAreaTal = new Double(0);
      Double TotAreaEst = new Double(0);

     public Totals(double _TotAreaTalDef, double _TotAreaQuemDef, double _TotAreaTal, double _TotAreaEst)
     {
      TotAreaTalDef = _TotAreaTalDef;
      TotAreaQuemDef = _TotAreaQuemDef;
      TotAreaTal = _TotAreaTal;
      TotAreaEst = _TotAreaEst;
     }
    }
}
