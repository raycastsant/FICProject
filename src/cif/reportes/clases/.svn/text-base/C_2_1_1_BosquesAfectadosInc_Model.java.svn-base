package cif.reportes.clases;

import cif.manage.User;
import cif.reportes.ReportQuerys;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Raisel
 */
public class C_2_1_1_BosquesAfectadosInc_Model extends AbstractCritReport
{
    public TableModel getModel(User user, Integer anno, boolean desglose) throws SQLException
    {
     return getReportModel(user, anno, desglose);
    }

    @Override
    protected TableModel getModel_AP()
    {
      String sql = getSQLReplacement(ReportQuerys.SQL_2_1_1_AP, user.getIdEntidad(), anno.toString());
      db.executeQueryUperCase(sql);

      return db;
    }

    @Override
    protected TableModel getModel_US()
    {
      String sql = getSQLReplacement(ReportQuerys.SQL_2_1_1_US, user.getIdEntidad(), anno.toString());
      db.executeQueryUperCase(sql);

      return db;
    }

    @Override
    protected TableModel getModel_EFI()
    {
        DefaultTableModel deftm = new DefaultTableModel();

        String sql = getSQLReplacement(ReportQuerys.SQL_2_1_1_EFI_Subgrupo, user.getIdEntidad(), anno.toString());

        db.executeQueryUperCase(sql);
        if(!db.isEmpty())
        {
         deftm = new javax.swing.table.DefaultTableModel(db.getAllRows(), db.getColumnNames());

         sql = getSQLReplacement(ReportQuerys.SQL_2_1_1_EFI_TOTAL, user.getIdEntidad(), anno.toString());
         db.executeQuery(sql);

         Object []row = new String []{"TOTAL","","","", db.getValueAt(0,1).toString(), db.getValueAt(0,2).toString(), db.getValueAt(0,3).toString()};
         deftm.addRow(row);
        }

        return deftm;
    }

    @Override
    protected TableModel getModel_MUN()
    {
           String prov = "";
           String mun = "";
           String cant = "";
           String distrec = "";
           String supafect = "";
           String tipoEntidad = "";
           Object []row = null;
           Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME, ReportQuerys.TIPOENTIDAD_COLUMN_NAME,
                                              ReportQuerys.CANTIDAD_COLUMN_NAME, ReportQuerys.DISTANCIA_RECORR_COLUMN_NAME, ReportQuerys.SUP_AFECT_TOTAL_COLUMN_NAME};
           DefaultTableModel deftm= new DefaultTableModel(columNames, 0);
           Double totCant = new Double(0);
           Double totDistrec = new Double(0);
           Double totSupafect = new Double(0);

           String sql = getSQLReplacement(ReportQuerys.SQL_2_1_1_MUN_SubGrupoUS, user.getIdEntidad(), anno.toString());
           db.executeQuery(sql);
           if(!db.isEmpty())
           {
               prov = db.getValueAt(0,0).toString();
               mun = db.getValueAt(0,1).toString();
               cant = db.getValueAt(0,2).toString();
               distrec = db.getValueAt(0,3).toString();
               supafect = db.getValueAt(0,4).toString();
               tipoEntidad = ReportQuerys.ENTIDAD_UNIDADES_SILVICOLAS;
               row = new String []{prov, mun, tipoEntidad, cant, distrec, supafect};
               deftm.addRow(row);

               totCant += Double.parseDouble(cant);
               totDistrec += Double.parseDouble(distrec);
               totSupafect += Double.parseDouble(supafect);
           }

           sql = getSQLReplacement(ReportQuerys.SQL_2_1_1_MUN_SubGrupoAP, user.getIdEntidad(), anno.toString());
           db.executeQuery(sql);
           if(!db.isEmpty())
           {
               prov = db.getValueAt(0,0).toString();
               mun = db.getValueAt(0,1).toString();
               cant = db.getValueAt(0,2).toString();
               distrec = db.getValueAt(0,3).toString();
               supafect = db.getValueAt(0,4).toString();
               tipoEntidad = ReportQuerys.ENTIDAD_AREAS_PROTEGIDAS;
               row = new String []{prov, mun, tipoEntidad, cant, distrec, supafect};
               deftm.addRow(row);

               totCant += Double.parseDouble(cant);
               totDistrec += Double.parseDouble(distrec);
               totSupafect += Double.parseDouble(supafect);
           }

           sql = getSQLReplacement(ReportQuerys.SQL_2_1_1_MUN_SubGrupoOTROS, user.getIdEntidad(), anno.toString());
           db.executeQuery(sql);
           if(!db.isEmpty())
           {
               prov = db.getValueAt(0,0).toString();
               mun = db.getValueAt(0,1).toString();
               cant = db.getValueAt(0,2).toString();
               distrec = db.getValueAt(0,3).toString();
               supafect = db.getValueAt(0,4).toString();
               tipoEntidad = ReportQuerys.ENTIDAD_OTROS;
               row = new String []{prov, mun, tipoEntidad, cant, distrec, supafect};
               deftm.addRow(row);

               totCant += Double.parseDouble(cant);
               totDistrec += Double.parseDouble(distrec);
               totSupafect += Double.parseDouble(supafect);
           }

           row = new String []{"TOTAL", "", "", totCant.toString(), totDistrec.toString(), totSupafect.toString()};
           deftm.addRow(row);

           return deftm;
    }

    @Override
    protected TableModel getModel_PROV()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME,
                                         ReportQuerys.CANTIDAD_COLUMN_NAME, ReportQuerys.DISTANCIA_RECORR_COLUMN_NAME,
                                         ReportQuerys.SUP_AFECT_TOTAL_COLUMN_NAME};
       DefaultTableModel deftm= new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0,0,0);

       rowTotals = updateProvincia_MunRow(ReportQuerys.SQL_2_1_1_MUN_SubGrupoUS, user.getIdEntidad(), anno.toString(), deftm, rowTotals);

       rowTotals = updateProvincia_MunRow(ReportQuerys.SQL_2_1_1_MUN_SubGrupoAP, user.getIdEntidad(), anno.toString(), deftm, rowTotals);

       rowTotals = updateProvincia_MunRow(ReportQuerys.SQL_2_1_1_MUN_SubGrupoOTROS, user.getIdEntidad(), anno.toString(), deftm, rowTotals);

       row = new String []{"TOTAL", "", rowTotals.totCant.toString(), rowTotals.totDistrec.toString(), rowTotals.totSupafect.toString()};
       deftm.addRow(row);

       return deftm;
    }

    @Override
    protected TableModel getModel_PROV_DESGLOSE()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME, ReportQuerys.TIPOENTIDAD_COLUMN_NAME,
                                              ReportQuerys.CANTIDAD_COLUMN_NAME, ReportQuerys.DISTANCIA_RECORR_COLUMN_NAME, ReportQuerys.SUP_AFECT_TOTAL_COLUMN_NAME};
       DefaultTableModel deftm= new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0,0,0);

       rowTotals = updateProvincia_DesgloseRow(ReportQuerys.SQL_2_1_1_MUN_SubGrupoUS, user.getIdEntidad(), anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_UNIDADES_SILVICOLAS);

       rowTotals = updateProvincia_DesgloseRow(ReportQuerys.SQL_2_1_1_MUN_SubGrupoAP, user.getIdEntidad(), anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_AREAS_PROTEGIDAS);

       rowTotals = updateProvincia_DesgloseRow(ReportQuerys.SQL_2_1_1_MUN_SubGrupoOTROS, user.getIdEntidad(), anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_OTROS);

       row = new String []{"TOTAL", "", "", rowTotals.totCant.toString(), rowTotals.totDistrec.toString(), rowTotals.totSupafect.toString()};
       deftm.addRow(row);

       return deftm;
    }

    @Override
    protected TableModel getModel_NAC()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.CANTIDAD_COLUMN_NAME, ReportQuerys.DISTANCIA_RECORR_COLUMN_NAME,
                                         ReportQuerys.SUP_AFECT_TOTAL_COLUMN_NAME};
       DefaultTableModel deftm= new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0,0,0);

       rowTotals = updateProvinciaRow(ReportQuerys.SQL_2_1_1_PROV_SubGrupoUS, anno.toString(), deftm, rowTotals);

       rowTotals = updateProvinciaRow(ReportQuerys.SQL_2_1_1_PROV_SubGrupoAP, anno.toString(), deftm, rowTotals);

       rowTotals = updateProvinciaRow(ReportQuerys.SQL_2_1_1_PROV_SubGrupoOTROS, anno.toString(), deftm, rowTotals);

       row = new String []{"TOTAL", rowTotals.totCant.toString(), rowTotals.totDistrec.toString(), rowTotals.totSupafect.toString()};
       deftm.addRow(row);

       return deftm;
    }

    @Override
    protected TableModel getModel_NAC_DESGLOSE()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME, ReportQuerys.TIPOENTIDAD_COLUMN_NAME,
                                              ReportQuerys.CANTIDAD_COLUMN_NAME, ReportQuerys.DISTANCIA_RECORR_COLUMN_NAME, ReportQuerys.SUP_AFECT_TOTAL_COLUMN_NAME};
       DefaultTableModel deftm= new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0,0,0);

       rowTotals = updateDNF_DesgloseRow(ReportQuerys.SQL_2_1_1_MUN_SubGrupoUS, anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_UNIDADES_SILVICOLAS);

       rowTotals = updateDNF_DesgloseRow(ReportQuerys.SQL_2_1_1_MUN_SubGrupoAP, anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_AREAS_PROTEGIDAS);

       rowTotals = updateDNF_DesgloseRow(ReportQuerys.SQL_2_1_1_MUN_SubGrupoOTROS, anno.toString(), deftm, rowTotals, ReportQuerys.ENTIDAD_OTROS);

       row = new String []{"TOTAL", "", "", rowTotals.totCant.toString(), rowTotals.totDistrec.toString(), rowTotals.totSupafect.toString()};
       deftm.addRow(row);

       return deftm;
    }

    private Totals updateProvincia_MunRow(String SqlPattern, String Entidad, String anno, DefaultTableModel dftm, Totals tot)
    {
       String prov = "";
       String mun = "";
       Double cant = new Double(0);
       Double distrec = new Double(0);
       Double supafect = new Double(0);
       Object []row = null;

       Double totCant = tot.totCant;
       Double totDistrec = tot.totDistrec;
       Double totSupafect = tot.totSupafect;

       String sql = SqlPattern.replaceFirst("where municipios.id", "where provincias.id");
       sql = getSQLReplacement(sql, Entidad, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               boolean rowUpdated = false;

               prov = db.getValueAt(i,0).toString();
               mun = db.getValueAt(i,1).toString();
               cant = Double.parseDouble(db.getValueAt(i,2).toString());
               distrec = Double.parseDouble(db.getValueAt(i,3).toString());
               supafect = Double.parseDouble(db.getValueAt(i,4).toString());
               totCant += cant;
               totDistrec += distrec;
               totSupafect += supafect;

               if(dftm.getRowCount() > 0)
               {
                    String tmMun = "";
                    for(int k=0; k<dftm.getRowCount(); k++)
                    {
                     tmMun = dftm.getValueAt(k,1).toString();
                     if(tmMun.equals(mun))
                     {
                      double tempCant = Double.parseDouble(dftm.getValueAt(k,2).toString());
                      double tempDistrec = Double.parseDouble(dftm.getValueAt(k,3).toString());
                      double tempSupafect = Double.parseDouble(dftm.getValueAt(k,4).toString());
                      dftm.setValueAt((tempCant+cant), k, 2);
                      dftm.setValueAt((tempDistrec+distrec), k, 3);
                      dftm.setValueAt((tempSupafect+supafect), k, 4);

                      rowUpdated = true;
                      break;
                     }
                    }
               }

               if(!rowUpdated)
               {
                row = new String []{prov, mun, cant.toString(), distrec.toString(), supafect.toString()};
                dftm.addRow(row);
               }
           }
       }

       return new Totals(totCant, totDistrec, totSupafect);
   }
//
    private Totals updateProvinciaRow(String SqlPattern, String anno, DefaultTableModel dftm, Totals tot)
    {
       String prov = "";
       Double cant = new Double(0);
       Double distrec = new Double(0);
       Double supafect = new Double(0);
       Object []row = null;

       Double totCant = tot.totCant;
       Double totDistrec = tot.totDistrec;
       Double totSupafect = tot.totSupafect;

       String sql = getSQLReplacement(SqlPattern, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               boolean rowUpdated = false;

               prov = db.getValueAt(i,0).toString();
               cant = Double.parseDouble(db.getValueAt(i,1).toString());
               distrec = Double.parseDouble(db.getValueAt(i,2).toString());
               supafect = Double.parseDouble(db.getValueAt(i,3).toString());
               totCant += cant;
               totDistrec += distrec;
               totSupafect += supafect;

               if(dftm.getRowCount() > 0)
               {
                    String tmProv = "";
                    for(int k=0; k<dftm.getRowCount(); k++)
                    {
                     tmProv = dftm.getValueAt(k,0).toString();
                     if(tmProv.equals(prov))
                     {
                      double tempCant = Double.parseDouble(dftm.getValueAt(k,1).toString());
                      double tempDistrec = Double.parseDouble(dftm.getValueAt(k,2).toString());
                      double tempSupafect = Double.parseDouble(dftm.getValueAt(k,3).toString());
                      dftm.setValueAt((tempCant+cant), k, 1);
                      dftm.setValueAt((tempDistrec+distrec), k, 2);
                      dftm.setValueAt((tempSupafect+supafect), k, 3);
                      rowUpdated = true;
                      break;
                     }
                    }
               }

               if(!rowUpdated)
               {
                row = new String []{prov, cant.toString(), distrec.toString(), supafect.toString()};
                dftm.addRow(row);
               }
           }
       }

       return new Totals(totCant, totDistrec, totSupafect);
   }
//
    private Totals updateProvincia_DesgloseRow(String SqlPattern, String Entidad, String anno, DefaultTableModel dftm, Totals tot, String tipoEntidad)
    {
       String prov = "";
       String mun = "";
       Double cant = new Double(0);
       Double distrec = new Double(0);
       Double supafect = new Double(0);
       Object []row = null;

       Double totCant = tot.totCant;
       Double totDistrec = tot.totDistrec;
       Double totSupafect = tot.totSupafect;

       String sql = SqlPattern.replaceFirst("where municipios.id", "where provincias.id");
       sql = getSQLReplacement(sql, Entidad, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               boolean rowUpdated = false;
               int rowIndex = dftm.getRowCount();

               prov = db.getValueAt(i,0).toString();
               mun = db.getValueAt(i,1).toString();
               cant = Double.parseDouble(db.getValueAt(i,2).toString());
               distrec = Double.parseDouble(db.getValueAt(i,3).toString());
               supafect = Double.parseDouble(db.getValueAt(i,4).toString());
               totCant += cant;
               totDistrec += distrec;
               totSupafect += supafect;

               if(dftm.getRowCount() > 0)
               {
                    String tmMun = "";
                    String tmEntidad = "";
                    for(int k=0; k<dftm.getRowCount(); k++)
                    {
                     tmMun = dftm.getValueAt(k,1).toString();
                     tmEntidad = dftm.getValueAt(k,2).toString();
                     if((tmMun.equals(mun)) && (tmEntidad.equals(tipoEntidad)))
                     {
                      double tempCant = Double.parseDouble(dftm.getValueAt(k,3).toString());
                      double tempDistrec = Double.parseDouble(dftm.getValueAt(k,4).toString());
                      double tempSupafect = Double.parseDouble(dftm.getValueAt(k,5).toString());
                      dftm.setValueAt((tempCant+cant), k, 3);
                      dftm.setValueAt((tempDistrec+distrec), k, 4);
                      dftm.setValueAt((tempSupafect+supafect), k, 5);
                      rowUpdated = true;
                      break;
                     }
                     else
                     if(tmMun.equals(mun))
                     {
                      rowIndex = k+1;
                      break;
                     }
                    }
               }

               if(!rowUpdated)
               {
                row = new String []{prov, mun, tipoEntidad, cant.toString(), distrec.toString(), supafect.toString()};
                dftm.insertRow(rowIndex, row);
               }
           }
        }

       return new Totals(totCant, totDistrec, totSupafect);
    }
//
    private Totals updateDNF_DesgloseRow(String SqlPattern, String anno, DefaultTableModel dftm, Totals tot, String tipoEntidad)
    {
       String prov = "";
       String mun = "";
       Double cant = new Double(0);
       Double distrec = new Double(0);
       Double supafect = new Double(0);
       Object []row = null;

       Double totCant = tot.totCant;
       Double totDistrec = tot.totDistrec;
       Double totSupafect = tot.totSupafect;

       String sql = SqlPattern.replaceFirst("municipios.id=':id' and", "");
       sql = getSQLReplacement(sql, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               prov = db.getValueAt(i,0).toString();
               mun = db.getValueAt(i,1).toString();
               cant = Double.parseDouble(db.getValueAt(i,2).toString());
               distrec = Double.parseDouble(db.getValueAt(i,3).toString());
               supafect = Double.parseDouble(db.getValueAt(i,4).toString());
               totCant += cant;
               totDistrec += distrec;
               totSupafect += supafect;

               int rowIndex = getProvincia_Mun_Ent_RowIndex(prov, mun, tipoEntidad, dftm);

               if((rowIndex==0) && (dftm.getRowCount()<=0)) //agregar
               {
                row = new String []{prov, mun, tipoEntidad, cant.toString(), distrec.toString(), supafect.toString()};
                dftm.addRow(row);
               }
               else
               if(rowIndex >= 0) //insertar
               {
                row = new String []{prov, mun, tipoEntidad, cant.toString(), distrec.toString(), supafect.toString()};
                dftm.insertRow((rowIndex+1), row);
               }
               else     //actualizar
               {
                      rowIndex = rowIndex*(-1);
                      double tempCant = Double.parseDouble(dftm.getValueAt(rowIndex,3).toString());
                      double tempDistrec = Double.parseDouble(dftm.getValueAt(rowIndex,4).toString());
                      double tempSupafect = Double.parseDouble(dftm.getValueAt(rowIndex,5).toString());
                      dftm.setValueAt((tempCant+cant), rowIndex, 3);
                      dftm.setValueAt((tempDistrec+distrec), rowIndex, 4);
                      dftm.setValueAt((tempSupafect+supafect), rowIndex, 5);
               }
           }
        }

       return new Totals(totCant, totDistrec, totSupafect);
    }

    class Totals
    {
       Double totCant = new Double(0);
       Double totDistrec = new Double(0);
       Double totSupafect = new Double(0);

     public Totals(double _totCant, double _totDistrec, double _totSupafect)
     {
      totCant = _totCant;
      totDistrec = _totDistrec;
      totSupafect = _totSupafect;
     }
    }
}
