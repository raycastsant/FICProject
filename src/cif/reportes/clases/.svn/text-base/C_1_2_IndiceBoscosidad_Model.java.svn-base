package cif.reportes.clases;

import cif.bd.DBAccess;
import cif.manage.User;
import cif.manage.UserTypes;
import cif.reportes.ReportQuerys;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Raisel
 */
public class C_1_2_IndiceBoscosidad_Model extends AbstractCritReport
{
    public TableModel getModel(User user, Integer anno, boolean desglose) throws SQLException
    {
     return getReportModel(user, anno, desglose);
    }

    @Override
    protected TableModel getModel_US()
    {
       String sql = getSQLReplacement(ReportQuerys.SQL_1_2_US, user.getIdEntidad(), anno.toString());
       db.executeQueryUperCase(sql);

       return db;
    }

    @Override
    protected TableModel getModel_AP()
    {
      String sql = getSQLReplacement(ReportQuerys.SQL_1_2_AP, user.getIdEntidad(), anno.toString());
      db.executeQueryUperCase(sql);

      return db;
    }

    @Override
    protected TableModel getModel_EFI()
    {
       DefaultTableModel tm = new DefaultTableModel();
       String sql = getSQLReplacement(ReportQuerys.SQL_1_2_EFI_Subgrupo, user.getIdEntidad(), anno.toString());

       db.executeQueryUperCase(sql);
       if(!db.isEmpty())
       {
          tm = new javax.swing.table.DefaultTableModel(db.getAllRows(), db.getColumnNames());

          sql = getSQLReplacement(ReportQuerys.SQL_1_2_EFI_TOTAL, user.getIdEntidad(), anno.toString());
          db.executeQuery(sql);

          Object []row = new String []{"TOTAL","","","", db.getValueAt(0,1).toString()};
          tm.addRow(row);
        }

       return tm;
    }

    @Override
    protected TableModel getModel_MUN()
    {
           String prov = "";
           String mun = "";
           String supGeog = "";
           String tipoEntidad = "";
           Object []row = null;
           Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME, ReportQuerys.TIPOENTIDAD_COLUMN_NAME,
                                              ReportQuerys.SUP_GEOGRAFICA_COLUMN_NAME};
           DefaultTableModel deftm = new DefaultTableModel(columNames, 0);
           Double totSupGeog = new Double(0);

           String sql = getSQLReplacement(ReportQuerys.SQL_1_2_MUN_SubGrupoUS, user.getIdEntidad(), anno.toString());
           db.executeQuery(sql);
           if(!db.isEmpty())
           {
               prov = db.getValueAt(0,0).toString();
               mun = db.getValueAt(0,1).toString();
               supGeog = db.getValueAt(0,2).toString();
               tipoEntidad = ReportQuerys.ENTIDAD_UNIDADES_SILVICOLAS;
               row = new String []{prov, mun, tipoEntidad, supGeog};
               deftm.addRow(row);
               totSupGeog += Double.parseDouble(supGeog);
           }

           sql = getSQLReplacement(ReportQuerys.SQL_1_2_MUN_SubGrupoAP, user.getIdEntidad(), anno.toString());
           db.executeQuery(sql);
           if(!db.isEmpty())
           {
               prov = db.getValueAt(0,0).toString();
               mun = db.getValueAt(0,1).toString();
               supGeog = db.getValueAt(0,2).toString();
               tipoEntidad = ReportQuerys.ENTIDAD_AREAS_PROTEGIDAS;
               row = new String []{prov, mun, tipoEntidad, supGeog};
               deftm.addRow(row);
               totSupGeog += Double.parseDouble(supGeog);
           }

           sql = getSQLReplacement(ReportQuerys.SQL_1_2_MUN_SubGrupoOTROS, user.getIdEntidad(), anno.toString());
           db.executeQuery(sql);
           if(!db.isEmpty())
           {
               prov = db.getValueAt(0,0).toString();
               mun = db.getValueAt(0,1).toString();
               supGeog = db.getValueAt(0,2).toString();
               tipoEntidad = ReportQuerys.ENTIDAD_OTROS;
               row = new String []{prov, mun, tipoEntidad, supGeog};
               deftm.addRow(row);
               totSupGeog += Double.parseDouble(supGeog);
           }

           row = new String []{"TOTAL", "", "", totSupGeog.toString()};
           deftm.addRow(row);

           return deftm;
    }

    @Override
    protected TableModel getModel_PROV()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME,
                                          ReportQuerys.SUP_GEOGRAFICA_COLUMN_NAME};
       DefaultTableModel deftm= new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0);

       rowTotals = updateProvincia_MunRow(ReportQuerys.SQL_1_2_MUN_SubGrupoUS, user.getIdEntidad(), anno.toString(), deftm, 0);

       rowTotals = updateProvincia_MunRow(ReportQuerys.SQL_1_2_MUN_SubGrupoAP, user.getIdEntidad(), anno.toString(), deftm, rowTotals.SupGeog);

       rowTotals = updateProvincia_MunRow(ReportQuerys.SQL_1_2_MUN_SubGrupoOTROS, user.getIdEntidad(), anno.toString(), deftm, rowTotals.SupGeog);

       row = new String []{"TOTAL", "", rowTotals.SupGeog.toString()};
       deftm.addRow(row);

       return deftm;
    }

    @Override
    protected TableModel getModel_PROV_DESGLOSE()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME, ReportQuerys.TIPOENTIDAD_COLUMN_NAME,
                                              ReportQuerys.SUP_GEOGRAFICA_COLUMN_NAME};
       DefaultTableModel deftm = new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0);

       rowTotals = updateProvincia_DesgloseRow(ReportQuerys.SQL_1_2_MUN_SubGrupoUS, user.getIdEntidad(), anno.toString(),
                                               deftm, 0, ReportQuerys.ENTIDAD_UNIDADES_SILVICOLAS);

       rowTotals = updateProvincia_DesgloseRow(ReportQuerys.SQL_1_2_MUN_SubGrupoAP, user.getIdEntidad(), anno.toString(),
                                               deftm, rowTotals.SupGeog, ReportQuerys.ENTIDAD_AREAS_PROTEGIDAS);

       rowTotals = updateProvincia_DesgloseRow(ReportQuerys.SQL_1_2_MUN_SubGrupoOTROS, user.getIdEntidad(), anno.toString(),
                                               deftm, rowTotals.SupGeog, ReportQuerys.ENTIDAD_OTROS);

       row = new String []{"TOTAL", "", "", rowTotals.SupGeog.toString()};
       deftm.addRow(row);

       return deftm;
    }

    @Override
    protected TableModel getModel_NAC()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.SUP_GEOGRAFICA_COLUMN_NAME};
       DefaultTableModel deftm= new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0);

       rowTotals = updateProvinciaRow(ReportQuerys.SQL_1_2_PROV_SubGrupoUS, anno.toString(), deftm, 0);

       rowTotals = updateProvinciaRow(ReportQuerys.SQL_1_2_PROV_SubGrupoAP, anno.toString(), deftm, rowTotals.SupGeog);

       rowTotals = updateProvinciaRow(ReportQuerys.SQL_1_2_PROV_SubGrupoOTROS, anno.toString(), deftm, rowTotals.SupGeog);

       row = new String []{"TOTAL", rowTotals.SupGeog.toString()};
       deftm.addRow(row);

       return deftm;
    }

    @Override
    protected TableModel getModel_NAC_DESGLOSE()
    {
       Object []row = null;
       Object []columNames = new String[]{ReportQuerys.PROVINCIAS_COLUMN_NAME, ReportQuerys.MUNICIPIOS_COLUMN_NAME, ReportQuerys.TIPOENTIDAD_COLUMN_NAME,
                                              ReportQuerys.SUP_GEOGRAFICA_COLUMN_NAME};
       DefaultTableModel deftm = new DefaultTableModel(columNames, 0);

       Totals rowTotals = new Totals(0);

       rowTotals = updateDNF_DesgloseRow(ReportQuerys.SQL_1_2_MUN_SubGrupoUS, anno.toString(),
                                               deftm, 0, ReportQuerys.ENTIDAD_UNIDADES_SILVICOLAS);

       rowTotals = updateDNF_DesgloseRow(ReportQuerys.SQL_1_2_MUN_SubGrupoAP, anno.toString(),
                                               deftm, rowTotals.SupGeog, ReportQuerys.ENTIDAD_AREAS_PROTEGIDAS);

       rowTotals = updateDNF_DesgloseRow(ReportQuerys.SQL_1_2_MUN_SubGrupoOTROS, anno.toString(),
                                               deftm, rowTotals.SupGeog, ReportQuerys.ENTIDAD_OTROS);

       row = new String []{"TOTAL", "", "", rowTotals.SupGeog.toString()};
       deftm.addRow(row);

       return deftm;
    }

    private Totals updateProvincia_MunRow(String SqlPattern, String Entidad, String anno, DefaultTableModel dftm, double SupGeogCount)
    {
       String prov = "";
       String mun = "";
       Double supGeog = new Double(0);
       Object []row = null;

       Double totSupGeog = SupGeogCount;

       String sql = SqlPattern.replaceFirst("where municipios.id", "where provincias.id");
       sql = getSQLReplacement(sql, Entidad, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               boolean rowUpdated = false;
               
               prov = db.getValueAt(i,0).toString();
               mun = db.getValueAt(i,1).toString();
               supGeog = Double.parseDouble(db.getValueAt(i,2).toString());
               totSupGeog += supGeog;

               if(dftm.getRowCount() > 0)
               {
                    String tmMun = "";
                    for(int k=0; k<dftm.getRowCount(); k++)
                    {
                     tmMun = dftm.getValueAt(k,1).toString();
                     if(tmMun.equals(mun))
                     {
                      double tempSupGeog = Double.parseDouble(dftm.getValueAt(k,2).toString());
                      dftm.setValueAt((tempSupGeog+supGeog), k, 2);
                      rowUpdated = true;
                      break;
                     }
                    }
               }

               if(!rowUpdated)
               {
                row = new String []{prov, mun, supGeog.toString()};
                dftm.addRow(row);
               }
           }
       }

       return new Totals(totSupGeog);
   }

    private Totals updateProvinciaRow(String SqlPattern, String anno, DefaultTableModel dftm, double SupGeogCount)
    {
       String prov = "";
       Double supGeog = new Double(0);
       Object []row = null;

       Double totSupGeog = SupGeogCount;

       String sql = getSQLReplacement(SqlPattern, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               boolean rowUpdated = false;

               prov = db.getValueAt(i,0).toString();
               supGeog = Double.parseDouble(db.getValueAt(i,1).toString());
               totSupGeog += supGeog;

               if(dftm.getRowCount() > 0)
               {
                    String tmProv = "";
                    for(int k=0; k<dftm.getRowCount(); k++)
                    {
                     tmProv = dftm.getValueAt(k,0).toString();
                     if(tmProv.equals(prov))
                     {
                      double tempSupGeog = Double.parseDouble(dftm.getValueAt(k,1).toString());
                      dftm.setValueAt((tempSupGeog+supGeog), k, 1);
                      rowUpdated = true;
                      break;
                     }
                    }
               }

               if(!rowUpdated)
               {
                row = new String []{prov, supGeog.toString()};
                dftm.addRow(row);
               }
           }
       }

       return new Totals(totSupGeog);
   }

    private Totals updateProvincia_DesgloseRow(String SqlPattern, String Entidad, String anno, DefaultTableModel dftm, double SupGeogCount, String tipoEntidad)
    {
       String prov = "";
       String mun = "";
       Double sgeog = new Double(0);
       Object []row = null;

       Double totSGeog = SupGeogCount;

       String sql = SqlPattern.replaceFirst("where municipios.id", "where provincias.id");
       sql = getSQLReplacement(sql, Entidad, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               boolean rowUpdated = false;
               int rowIndex = dftm.getRowCount();

               prov = db.getValueAt(i,0).toString();
               mun = db.getValueAt(i,1).toString();
               sgeog = Double.parseDouble(db.getValueAt(i,2).toString());
               totSGeog += sgeog;

               if(dftm.getRowCount() > 0)
               {
                    String tmMun = "";
                    String tmEntidad = "";
                    for(int k=0; k<dftm.getRowCount(); k++)
                    {
                         tmMun = dftm.getValueAt(k,1).toString();
                         tmEntidad = dftm.getValueAt(k,2).toString();
                         if((tmMun.equals(mun)) && (tmEntidad.equals(tipoEntidad)))
                         {
                          double tempSGeog = Double.parseDouble(dftm.getValueAt(k,3).toString());
                          dftm.setValueAt((tempSGeog+sgeog), k, 3);
                          rowUpdated = true;
                          break;
                         }
                         else
                         if(tmMun.equals(mun))
                         {
                          rowIndex = k+1;
                          break;
                         }
                    }
               }

               if(!rowUpdated)
               {
                row = new String []{prov, mun, tipoEntidad, sgeog.toString()};
                dftm.insertRow(rowIndex, row);
               }
           }
       }

       return new Totals(totSGeog);
    }

    private Totals updateDNF_DesgloseRow(String SqlPattern, String anno, DefaultTableModel dftm, double sgeogCount, String tipoEntidad)
    {
       String prov = "";
       String mun = "";
       Double sgeog = new Double(0);
       Object []row = null;

       Double totSGeog = sgeogCount;

       String sql = SqlPattern.replaceFirst("municipios.id=':id' and", "");
       sql = getSQLReplacement(sql, anno);
       db.executeQuery(sql);
       if(!db.isEmpty())
       {
           for(int i=0; i<db.getRowCount(); i++)
           {
               prov = db.getValueAt(i,0).toString();
               mun = db.getValueAt(i,1).toString();
               sgeog = Double.parseDouble(db.getValueAt(i,2).toString());
               totSGeog += sgeog;

               int rowIndex = getProvincia_Mun_Ent_RowIndex(prov, mun, tipoEntidad, dftm);

               if((rowIndex==0) && (dftm.getRowCount()<=0)) //agregar
               {
                row = new String []{prov, mun, tipoEntidad, sgeog.toString()};
                dftm.addRow(row);
               }
               else
               if(rowIndex >= 0) //insertar
               {
                row = new String []{prov, mun, tipoEntidad, sgeog.toString()};
                dftm.insertRow((rowIndex+1), row);
               }
               else     //actualizar
               {
                 rowIndex = rowIndex*(-1);
                 double tempSGeog = Double.parseDouble(dftm.getValueAt(rowIndex, 3).toString());                
                 dftm.setValueAt((tempSGeog+sgeog), rowIndex, 3);
               }
           }
       }

       return new Totals(totSGeog);
    }

    class Totals
    {
     Double SupGeog = new Double(0);

     public Totals(double _SupGeog)
     {
      SupGeog = _SupGeog;
     }
    }
}
