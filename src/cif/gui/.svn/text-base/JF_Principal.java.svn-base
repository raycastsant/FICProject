/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JF_Principal.java
 *
 * Created on 04-oct-2012, 14:17:22
 */

package cif.gui;

import cif.manage.BaseUnits;
import cif.manage.Manage;
import cif.manage.User;
import cif.manage.UserTypes;
import cif.utiles.CIFMutableTreeNode;
import cif.utiles.Manejable;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.util.Calendar;
import javax.swing.JComponent;
import javax.swing.JPopupMenu;
import javax.swing.SpinnerNumberModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author Raisel
 */
public class JF_Principal extends javax.swing.JFrame
{
    private Manejable manejable = null;
    private final static String US = "Unidad Silvícola";
    private final static String AP = "Área Protegida";
    private final static String OTROS = "Otros";
    private JPopupMenu popup;
    private enum Report_Value {BASIC, BASE_UNITS, MUNICIPIOS, PROVINCIAS};
    private Report_Value report = Report_Value.BASIC;
    /** Creates new form JF_Principal */
    public JF_Principal() {
        init();
        jSAnno.setVisible(false);
        jLAño.setVisible(false);
        jMenuBar.setVisible(false);
        b_graph.setVisible(false);
        b_report.setVisible(false);
        b_insert.setVisible(false);
        b_modif.setVisible(false);
        b_elim.setVisible(false);
        jTree.setVisible(false);
        GridLayout gl = new GridLayout(1,1);
        jPCentro.setLayout(gl);
        this.setExtendedState(MAXIMIZED_BOTH);
        initSpiner();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jSAnno = new javax.swing.JSpinner();
        jLAño = new javax.swing.JLabel();
        jPCentro = new javax.swing.JPanel();
        b_elim = new javax.swing.JButton();
        b_modif = new javax.swing.JButton();
        b_insert = new javax.swing.JButton();
        b_report = new javax.swing.JButton();
        b_graph = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMTabla = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMDatos = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMAdministracion = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Criterios e Indicadores de Manejo Forestal Sostenible");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Criterios e Indicadores Forestales");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Cobertura Forestal");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.1. Total de área cubierta");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.2. Índice de boscosidad");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.3. Relación entre el TAC y la superficie cubierta potencial");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.4. Efectividad de las plantaciones realizadas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.5. Áreas pendientes por reforestar");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.6. Árboles en áreas urbanas");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Sanidad y vitalidad de los ecosistemas forestales");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("2.1. Bosques afectados por incendios forestales");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("2.2. Bosques afectados");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("2.3. Bosques necesitados de manejos silvícolas");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Contribución de los ecosistemas forestales a los servicios ambientales");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.1.1 Formaciones forestales representadas en Áreas Protegidas aprobadas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.1.2 Ejecución de programas para la conservación de especies endémicas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.1.3 Ejecución de programas protección de los recursos genéticos forestales");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.1.4 Programas de educación y extensión para la conservación de los bosques");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.2.1 Protección de los cuerpos de agua. Presas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.2.2 Protección de los cuerpos de agua. Micropresas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.2.3 Protección de los cuerpos de agua. Corrientes fluviales");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.3. Protección de la faja costera");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.4. Áreas afectadas por la actividad minera");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Funciones productivas de los ecosistemas");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4.1. Índice de Rendimiento Sostenido (IRS)");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4.2. Porcentaje de madera extraída de bosques naturales");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4.3. Superficie de bosques bajo régimen de explotación que emplean técnicas y tecnologías inadecuadas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4.4. Volumen de producción de Productos Forestales No Maderables (PFNM)");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4.5. Sistemas agrosilvopastoriles");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Múltiples beneficios socioeconómicos para cubrir las necesidades de la sociedad. Su mantenimiento y mejoramiento");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("5.1. Salario en el sector forestal (SM)");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("5.2. Ocurrencia de accidentes de trabajo");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("5.4. Terrenos forestales manejados para recreación y turismo, así como otras necesidades culturales y espirituales");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("5.5. Género");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTreeMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTree);

        jLAño.setText("Año:");

        jPCentro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 153))); // NOI18N

        javax.swing.GroupLayout jPCentroLayout = new javax.swing.GroupLayout(jPCentro);
        jPCentro.setLayout(jPCentroLayout);
        jPCentroLayout.setHorizontalGroup(
            jPCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 439, Short.MAX_VALUE)
        );
        jPCentroLayout.setVerticalGroup(
            jPCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 289, Short.MAX_VALUE)
        );

        b_elim.setText("Eliminar");
        b_elim.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_elimMouseClicked(evt);
            }
        });

        b_modif.setText("Modificar");
        b_modif.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_modifMouseClicked(evt);
            }
        });

        b_insert.setText("Insertar");
        b_insert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_insertMouseClicked(evt);
            }
        });

        b_report.setText("Reporte");

        b_graph.setText("Gráficos");
        b_graph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_graphMouseClicked(evt);
            }
        });

        jMTabla.setText("Tabla");

        jMenuItem1.setText("Exportar a Excel");
        jMTabla.add(jMenuItem1);

        jMenuItem2.setText("Imprimir");
        jMTabla.add(jMenuItem2);

        jMenuBar.add(jMTabla);

        jMDatos.setText("Datos");

        jMenuItem3.setText("Generar fichero de Exportación");
        jMDatos.add(jMenuItem3);

        jMenuItem4.setText("Cargar fichero de Actualización");
        jMDatos.add(jMenuItem4);

        jMenuBar.add(jMDatos);

        jMAdministracion.setText("Administración");

        jMenuItem5.setText("Gestionar Usuarios");
        jMAdministracion.add(jMenuItem5);

        jMenuBar.add(jMAdministracion);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b_graph)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b_report)
                        .addGap(42, 42, 42)
                        .addComponent(b_insert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_modif)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_elim))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLAño)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSAnno, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLAño))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_elim)
                    .addComponent(b_modif)
                    .addComponent(b_insert)
                    .addComponent(b_report)
                    .addComponent(b_graph))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeMousePressed
        TreePath selPath = jTree.getPathForLocation(evt.getX(), evt.getY());
        Object[] obj = selPath.getPath();
        if(obj[0] instanceof CIFMutableTreeNode)
        {
            manejable = ((CIFMutableTreeNode)obj[0]).getManageObject();
        }
    }//GEN-LAST:event_jTreeMousePressed

    private void b_insertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_insertMouseClicked
        manejable.Insert();
    }//GEN-LAST:event_b_insertMouseClicked

    private void b_modifMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_modifMouseClicked
        manejable.Modify();
    }//GEN-LAST:event_b_modifMouseClicked

    private void b_elimMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_elimMouseClicked
        manejable.Delete();
    }//GEN-LAST:event_b_elimMouseClicked

    private void b_graphMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_graphMouseClicked
        manejable.DrawGraphic();
    }//GEN-LAST:event_b_graphMouseClicked

    private void b_reportMouseClicked(java.awt.event.MouseEvent evt)
    {
        if(evt.getButton() == java.awt.event.MouseEvent.BUTTON1)
        {
            popup.show(b_report, b_report.getY(), b_report.getX());
        }
        else if(evt.getButton() == java.awt.event.MouseEvent.BUTTON3)
        {
            if(report == Report_Value.BASIC)
            {
                manejable.Report();
            }
            else if(report == Report_Value.BASE_UNITS)
            {
                manejable.BaseUnits_Report();
            }
            else if(report == Report_Value.MUNICIPIOS)
            {
                manejable.Munic_Report();
            }
            else
            {
                manejable.Prov_Report();
            }
        }
    }

    private void init()
    {
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jSAnno = new javax.swing.JSpinner();
        jLAño = new javax.swing.JLabel();
        jPCentro = new javax.swing.JPanel();
        b_elim = new javax.swing.JButton();
        b_modif = new javax.swing.JButton();
        b_insert = new javax.swing.JButton();
        b_report = new javax.swing.JButton();
        b_graph = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMTabla = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMDatos = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMAdministracion = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Criterios e Indicadores de Manejo Forestal Sostenible");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Criterios e Indicadores Forestales");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Cobertura Forestal");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new CIFMutableTreeNode("1.1. Total de área cubierta",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.2. Índice de boscosidad",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.3. Relación entre el TAC y la superficie cubierta potencial",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.4. Efectividad de las plantaciones realizadas",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.5. Áreas pendientes por reforestar",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.6. Árboles en áreas urbanas",null);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Sanidad y vitalidad de los ecosistemas forestales");
        treeNode3 = new CIFMutableTreeNode("2.1. Bosques afectados por incendios forestales",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("2.2. Bosques afectados",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("2.3. Bosques necesitados de manejos silvícolas",null);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Contribución de los ecosistemas forestales a los servicios ambientales");
        treeNode3 = new CIFMutableTreeNode("3.1.1 Formaciones forestales representadas en Áreas Protegidas aprobadas",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.1.2 Ejecución de programas para la conservación de especies endémicas",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.1.3 Ejecución de programas protección de los recursos genéticos forestales",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.1.4 Programas de educación y extensión para la conservación de los bosques",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.2.1 Protección de los cuerpos de agua. Presas",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.2.2 Protección de los cuerpos de agua. Micropresas",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.2.3 Protección de los cuerpos de agua. Corrientes fluviales",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.3. Protección de la faja costera",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.4. Áreas afectadas por la actividad minera",null);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Funciones productivas de los ecosistemas");
        treeNode3 = new CIFMutableTreeNode("4.1. Índice de Rendimiento Sostenido (IRS)",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.2. Porcentaje de madera extraída de bosques naturales",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.3. Superficie de bosques bajo régimen de explotación que emplean técnicas y tecnologías inadecuadas",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.4. Volumen de producción de Productos Forestales No Maderables (PFNM)",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.5. Sistemas agrosilvopastoriles",null);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Múltiples beneficios socioeconómicos para cubrir las necesidades de la sociedad. Su mantenimiento y mejoramiento");
        treeNode3 = new CIFMutableTreeNode("5.1. Salario en el sector forestal (SM)",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("5.2. Ocurrencia de accidentes de trabajo",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("5.4. Terrenos forestales manejados para recreación y turismo, así como otras necesidades culturales y espirituales",null);
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("5.5. Género",null);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree);
        jTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTreeMousePressed(evt);
            }
        });

        jLAño.setText("Año:");

        jPCentro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 153))); // NOI18N

        javax.swing.GroupLayout jPCentroLayout = new javax.swing.GroupLayout(jPCentro);
        jPCentro.setLayout(jPCentroLayout);
        jPCentroLayout.setHorizontalGroup(
            jPCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 439, Short.MAX_VALUE)
        );
        jPCentroLayout.setVerticalGroup(
            jPCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 289, Short.MAX_VALUE)
        );

        b_elim.setText("Eliminar");
         b_elim.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_elimMouseClicked(evt);
            }
        });

        b_modif.setText("Modificar");
        b_modif.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_modifMouseClicked(evt);
            }
        });

        b_insert.setText("Insertar");
        b_insert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_insertMouseClicked(evt);
            }
        });

        b_report.setText("Reporte");
        b_report.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_reportMouseClicked(evt);
            }
        });

        b_graph.setText("Gráficos");
        b_graph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_graphMouseClicked(evt);
            }
        });

        jMTabla.setText("Tabla");

        jMenuItem1.setText("Exportar a Excel");
        jMTabla.add(jMenuItem1);

        jMenuItem2.setText("Imprimir");
        jMTabla.add(jMenuItem2);

        jMenuBar.add(jMTabla);

        jMDatos.setText("Datos");

        jMenuItem3.setText("Generar fichero de Exportación");
        jMDatos.add(jMenuItem3);

        jMenuItem4.setText("Cargar fichero de Actualización");
        jMDatos.add(jMenuItem4);

        jMenuBar.add(jMDatos);

        jMAdministracion.setText("Administración");

        jMenuItem5.setText("Gestionar Usuarios");
        jMAdministracion.add(jMenuItem5);

        jMenuBar.add(jMAdministracion);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_graph)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b_report)
                        .addGap(42, 42, 42)
                        .addComponent(b_insert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_modif)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_elim))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLAño)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSAnno, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLAño))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_elim)
                    .addComponent(b_modif)
                    .addComponent(b_insert)
                    .addComponent(b_report)
                    .addComponent(b_graph))
                .addContainerGap())
        );

        pack();
    }

    public void setComponent(JComponent component)
    {
        jPCentro.add(component);
    }

    private void initSpiner()
    {
        Calendar c = Calendar.getInstance();
        int year = c.get(Calendar.YEAR);
        SpinnerNumberModel snm = new SpinnerNumberModel(year,1900,year,1);
        jSAnno.setModel(snm);
    }

    public void ValidateComponents()
    {
        //aqui segun el tipo de usuario activar las opciones disponibles
        User user = (Manage.getInstance()).getUser();
        String[] treeNodes = null;
        jSAnno.setVisible(true);
        jLAño.setVisible(true);
        jMenuBar.setVisible(true);
        b_graph.setVisible(true);
        b_report.setVisible(true);
        if(user.getType() == UserTypes.Area_Protegida || user.getType() == UserTypes.Municipal || user.getType() == UserTypes.Unidad_Silvicola)
        {
            b_insert.setVisible(true);
        }
        if(user.getType() == UserTypes.Municipal)
        {
            b_modif.setVisible(true);
            b_elim.setVisible(true);
            treeNodes = new String[3];
            treeNodes[0] = US;
            treeNodes[1] = AP;
            treeNodes[2] = OTROS;
        }
        if(treeNodes != null)
        {
            TreeModel tm = jTree.getModel();
            DefaultMutableTreeNode result = UpdateTree((DefaultMutableTreeNode)tm.getRoot(),treeNodes);
            jTree.setModel(new javax.swing.tree.DefaultTreeModel(result));
        }
        jTree.setVisible(true);
    }

    private DefaultMutableTreeNode UpdateTree(DefaultMutableTreeNode root, String[] leafs)
    {
        DefaultMutableTreeNode result;
        if(root.isLeaf())
        {
            result = new DefaultMutableTreeNode(root.getUserObject());
            Manejable man = ((CIFMutableTreeNode)root).getManageObject();
            for(int i=0; i<leafs.length; i++)
            {
                if(leafs[i].equals(US))
                {
                    man.setBaseUnits(BaseUnits.Unidad_Silvicola);
                }
                else if(leafs[i].equals(AP))
                {
                    man.setBaseUnits(BaseUnits.Area_Protegida);
                }
                else
                {
                    man.setBaseUnits(BaseUnits.Otros);
                }
                result.add(new CIFMutableTreeNode(leafs[i],man));
            }
            return result;
        }
        result = new DefaultMutableTreeNode(root.getUserObject());
        int count = root.getChildCount();
        for(int i=0; i<count; i++)
        {
            result.add(UpdateTree((DefaultMutableTreeNode)root.getChildAt(i),leafs));
        }
        return result;
    }

    private void initPopup()
    {
        javax.swing.JCheckBoxMenuItem basico = new javax.swing.JCheckBoxMenuItem("Básico", true);
        basico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                report = Report_Value.BASIC;
            }
        });
        javax.swing.JCheckBoxMenuItem unit_base = new javax.swing.JCheckBoxMenuItem("Por Unidades de Base");
        unit_base.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                report = Report_Value.BASE_UNITS;
            }
        });
        javax.swing.JCheckBoxMenuItem munic = new javax.swing.JCheckBoxMenuItem("Por Municipios");
        munic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                report = Report_Value.MUNICIPIOS;
            }
        });
        javax.swing.JCheckBoxMenuItem prov = new javax.swing.JCheckBoxMenuItem("Por Provincias");
        prov.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                report = Report_Value.PROVINCIAS;
            }
        });

        User user = Manage.getInstance().getUser();
        popup.add(basico);
        if(user.getType() == UserTypes.EFI || user.getType() == UserTypes.Municipal)
        {
            popup.add(unit_base);
        }
        else if(user.getType() == UserTypes.Provincial)
        {
            popup.add(unit_base);
            popup.add(munic);
        }
        else
        {
            popup.add(unit_base);
            popup.add(munic);
            popup.add(prov);
        }
    }

    public int getSelectedYear()
    {
        return Integer.parseInt(jSAnno.getValue().toString());
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JF_Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_elim;
    private javax.swing.JButton b_graph;
    private javax.swing.JButton b_insert;
    private javax.swing.JButton b_modif;
    private javax.swing.JButton b_report;
    private javax.swing.JLabel jLAño;
    private javax.swing.JMenu jMAdministracion;
    private javax.swing.JMenu jMDatos;
    private javax.swing.JMenu jMTabla;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPCentro;
    private javax.swing.JSpinner jSAnno;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree;
    // End of variables declaration//GEN-END:variables

}
