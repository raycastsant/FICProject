/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JF_Principal.java
 *
 * Created on 04-oct-2012, 14:17:22
 */

package cif.gui;

import cif.adminstration.manejables.APManejable;
import cif.adminstration.manejables.EFIManejable;
import cif.adminstration.manejables.USManejable;
import cif.adminstration.manejables.UserManejable;
import cif.adminstration.manejables.nomenc.CategManejable;
import cif.adminstration.manejables.nomenc.EEManejable;
import cif.adminstration.manejables.nomenc.EspecieManejable;
import cif.adminstration.manejables.nomenc.FFManejable;
import cif.adminstration.manejables.nomenc.MunicManejable;
import cif.adminstration.manejables.nomenc.PFNMManejable;
import cif.adminstration.manejables.nomenc.ProgEducManejable;
import cif.adminstration.manejables.nomenc.ProgProtManejable;
import cif.adminstration.manejables.nomenc.ProvManejable;
import cif.adminstration.manejables.nomenc.ServiciosManejable;
import cif.adminstration.manejables.nomenc.SignifManejable;
import cif.adminstration.manejables.nomenc.TalasManejable;
import cif.adminstration.task.LoadFileTask;
import cif.adminstration.task.WriteFileDataTask;
import cif.adminstration.task.WriteFileNomencTask;
import cif.adminstration.utiles.Utils;
import cif.manage.BaseUnits;
import cif.manage.Manage;
import cif.manage.User;
import cif.manage.UserTypes;
import cif.manejables.*;
import cif.utiles.CIFMutableTreeNode;
import cif.utiles.Manejable;
import java.awt.Component;
import java.awt.Dialog.ModalityType;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ScrollPaneConstants;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author Raisel
 */
public class JF_Principal extends javax.swing.JFrame
{
    private Manejable manejable = null;
    private final static String US = "Unidad Silvícola";
    private final static String AP = "Área Protegida";
    private final static String OTROS = "Otros";
    private JPopupMenu popup = new JPopupMenu();
    private enum Report_Value {BASIC, BASE_UNITS, MUNICIPIOS, PROVINCIAS};
    private Report_Value report = Report_Value.BASIC;
    private javax.swing.JCheckBoxMenuItem basico;
    private javax.swing.JCheckBoxMenuItem unit_base;
    private javax.swing.JCheckBoxMenuItem munic;
    private javax.swing.JCheckBoxMenuItem prov;
    private User user;
    JTable table;
    /** Creates new form JF_Principal */
    public JF_Principal() {
        init();
        jSAnno.setVisible(false);
        jLAnno.setVisible(false);
        jMenuBar.setVisible(false);
        b_graph.setVisible(false);
        b_report.setVisible(false);
        b_insert.setVisible(false);
        b_modif.setVisible(false);
        b_elim.setVisible(false);
        jTree.setVisible(false);
        jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        GridLayout gl = new GridLayout(1,1);
        jPCentro.setLayout(gl);
        this.setExtendedState(MAXIMIZED_BOTH);
        initSpiner();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jSAnno = new javax.swing.JSpinner();
        jLAnno = new javax.swing.JLabel();
        jPCentro = new javax.swing.JPanel();
        b_elim = new javax.swing.JButton();
        b_modif = new javax.swing.JButton();
        b_insert = new javax.swing.JButton();
        b_report = new javax.swing.JButton();
        b_graph = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMTabla = new javax.swing.JMenu();
        menu_export_excel = new javax.swing.JMenuItem();
        menu_print = new javax.swing.JMenuItem();
        jMDatos = new javax.swing.JMenu();
        export_file_menu = new javax.swing.JMenuItem();
        load_update_menu = new javax.swing.JMenuItem();
        jMAdministracion = new javax.swing.JMenu();
        manage_user_menu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Criterios e Indicadores de Manejo Forestal Sostenible");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Criterios e Indicadores Forestales");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Cobertura Forestal");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.1. Total de área cubierta");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.2. Índice de boscosidad");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.3. Relación entre el TAC y la superficie cubierta potencial");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.4. Efectividad de las plantaciones realizadas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.5. Áreas pendientes por reforestar");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("1.6. Árboles en áreas urbanas");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Sanidad y vitalidad de los ecosistemas forestales");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("2.1. Bosques afectados por incendios forestales");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("2.2. Bosques afectados");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("2.3. Bosques necesitados de manejos silvícolas");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Contribución de los ecosistemas forestales a los servicios ambientales");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.1.1 Formaciones forestales representadas en Áreas Protegidas aprobadas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.1.2 Ejecución de programas para la conservación de especies endémicas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.1.3 Ejecución de programas protección de los recursos genéticos forestales");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.1.4 Programas de educación y extensión para la conservación de los bosques");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.2.1 Protección de los cuerpos de agua. Presas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.2.2 Protección de los cuerpos de agua. Micropresas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.2.3 Protección de los cuerpos de agua. Corrientes fluviales");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.3. Protección de la faja costera");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("3.4. Áreas afectadas por la actividad minera");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Funciones productivas de los ecosistemas");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4.1. Índice de Rendimiento Sostenido (IRS)");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4.2. Porcentaje de madera extraída de bosques naturales");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4.3. Superficie de bosques bajo régimen de explotación que emplean técnicas y tecnologías inadecuadas");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4.4. Volumen de producción de Productos Forestales No Maderables (PFNM)");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("4.5. Sistemas agrosilvopastoriles");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Múltiples beneficios socioeconómicos para cubrir las necesidades de la sociedad. Su mantenimiento y mejoramiento");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("5.1. Salario en el sector forestal (SM)");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("5.2. Ocurrencia de accidentes de trabajo");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("5.4. Terrenos forestales manejados para recreación y turismo, así como otras necesidades culturales y espirituales");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("5.5. Género");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTreeMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTreeMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTree);

        jLAnno.setText("Año:");

        jPCentro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 153))); // NOI18N

        javax.swing.GroupLayout jPCentroLayout = new javax.swing.GroupLayout(jPCentro);
        jPCentro.setLayout(jPCentroLayout);
        jPCentroLayout.setHorizontalGroup(
            jPCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 439, Short.MAX_VALUE)
        );
        jPCentroLayout.setVerticalGroup(
            jPCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 292, Short.MAX_VALUE)
        );

        b_elim.setText("Eliminar");
        b_elim.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_elimMouseClicked(evt);
            }
        });

        b_modif.setText("Modificar");
        b_modif.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_modifMouseClicked(evt);
            }
        });

        b_insert.setText("Insertar");
        b_insert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_insertMouseClicked(evt);
            }
        });

        b_report.setText("Reporte");

        b_graph.setText("Gráficos");
        b_graph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_graphMouseClicked(evt);
            }
        });

        jMTabla.setText("Tabla");

        menu_export_excel.setText("Exportar a Excel");
        jMTabla.add(menu_export_excel);

        menu_print.setText("Imprimir");
        jMTabla.add(menu_print);

        jMenuBar.add(jMTabla);

        jMDatos.setText("Datos");

        export_file_menu.setText("Generar fichero de Exportación");
        jMDatos.add(export_file_menu);

        load_update_menu.setText("Cargar fichero de Actualización");
        jMDatos.add(load_update_menu);

        jMenuBar.add(jMDatos);

        jMAdministracion.setText("Administración");

        manage_user_menu.setText("Gestionar Usuarios");
        jMAdministracion.add(manage_user_menu);

        jMenuBar.add(jMAdministracion);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b_graph)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b_report)
                        .addGap(42, 42, 42)
                        .addComponent(b_insert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_modif)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_elim))
                    .addComponent(jPCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLAnno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSAnno, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLAnno))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_elim)
                    .addComponent(b_modif)
                    .addComponent(b_insert)
                    .addComponent(b_report)
                    .addComponent(b_graph))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeMousePressed
        TreePath selPath = jTree.getPathForLocation(evt.getX(), evt.getY());
        if(selPath != null)
        {
            removeComponent();
            jPCentro.revalidate();
            jPCentro.repaint();
            Object obj = selPath.getLastPathComponent();
            if(obj instanceof CIFMutableTreeNode)
            {
                manejable = ((CIFMutableTreeNode)obj).getManageObject();
                if(!((CIFMutableTreeNode)obj).isLeaf())
                {
                    b_insert.setEnabled(false);
                    b_modif.setEnabled(false);
                    b_elim.setEnabled(false);
                    b_report.setEnabled(true);
                    b_graph.setEnabled(true);
                }
                else
                {
                    b_insert.setEnabled(true);
                    b_modif.setEnabled(true);
                    b_report.setEnabled(true);
                    b_graph.setEnabled(true);
                    b_elim.setEnabled(true);
                }
            }
            else
            {
                b_insert.setEnabled(false);
                b_modif.setEnabled(false);
                b_elim.setEnabled(false);
                b_report.setEnabled(false);
                b_graph.setEnabled(false);
            }
            User user = Manage.getInstance().getUser();
            if(user.getType() == UserTypes.Nacional || user.getType() == UserTypes.Provincial)
            {
                b_insert.setVisible(false);
                b_modif.setVisible(false);
                b_elim.setVisible(false);
            }
        }
    }//GEN-LAST:event_jTreeMousePressed

    private void b_insertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_insertMouseClicked
//        System.out.println(table.getColumnModel().getColumn(1).getWidth());
//        return;
        if(b_insert.isEnabled())
        {
            manejable.Insert();
        }
    }//GEN-LAST:event_b_insertMouseClicked

    private void b_modifMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_modifMouseClicked
        if(b_modif.isEnabled())
        {
            manejable.Modify();
        }
    }//GEN-LAST:event_b_modifMouseClicked

    private void b_elimMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_elimMouseClicked
        if(b_elim.isEnabled())
        {
            manejable.Delete();
            b_reportMouseClicked(evt);
        }
    }//GEN-LAST:event_b_elimMouseClicked

    private void b_graphMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_graphMouseClicked
        if(b_graph.isEnabled())
        {
            manejable.DrawGraphic();
        }
    }//GEN-LAST:event_b_graphMouseClicked

    private void jTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTreeMouseClicked

    private void b_reportMouseClicked(java.awt.event.MouseEvent evt)
    {
        if(b_report.isEnabled())
        {
            JTable table;
            if(evt.getButton() == java.awt.event.MouseEvent.BUTTON3)
            {
                popup.show(b_report, evt.getX(), evt.getY());
            }
            else if(evt.getButton() == java.awt.event.MouseEvent.BUTTON1)
            {
                try
                {
                    if(report == Report_Value.BASIC)
                    {
                        table = manejable.Report();
                    }
                    else if(report == Report_Value.BASE_UNITS)
                    {
                        table = manejable.BaseUnits_Report();
                    }
                    else if(report == Report_Value.MUNICIPIOS)
                    {
                        table = manejable.Munic_Report();
                    }
                    else
                    {
                        table = manejable.Prov_Report();
                    }
                    setTable(table);
                }
                catch(UnsupportedOperationException e)
                {}
            }
        }
    }

    private void GenerateExportDataFile()
    {
        File file = SelectFileLocation("dcf",null);
        if(file == null)
        {
            return;
        }
        int selected_option = JOptionPane.showInternalConfirmDialog(getContentPane(),"El fichero ya existe.\n\r Desea sobreescribirlo?", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        if(selected_option != JOptionPane.OK_OPTION)
        {
            return;
        }
        if(!file.getName().endsWith(".dcf"))
        {
            String name = file.getAbsolutePath()+".dcf";
            file = new File(name);
        }
        WriteFileDataTask c_thread = new WriteFileDataTask(file);
        Thread bground_thread = new Thread(c_thread);
        bground_thread.setDaemon(true);
        bground_thread.start();
    }

    private void GenerateExportNomencFile()
    {
        File file = SelectFileLocation("ncf",null);
        if(file == null)
        {
            return;
        }
        if(!file.getName().endsWith(".ncf"))
        {
            String name = file.getAbsolutePath()+".ncf";
            file = new File(name);
        }
        WriteFileNomencTask c_thread = new WriteFileNomencTask(file);
        Thread bground_thread = new Thread(c_thread);
        bground_thread.setDaemon(true);
        bground_thread.start();
    }

    private void LoadExportDataFile()
    {
        File file = SelectFileLocation("dcf",null);
        if(file == null)
        {
            return;
        }
        while(!file.exists())
        {
            File f = file.getParentFile();
            file = SelectFileLocation("dcf",f);
        }
        LoadFileTask c_thread = new LoadFileTask(file,LoadFileTask.DATOS);
        Thread bground_thread = new Thread(c_thread);
        bground_thread.setDaemon(true);
        bground_thread.start();
    }

    private void LoadExportNomencFile()
    {
        File file = SelectFileLocation("ncf",null);
        if(file == null)
        {
            return;
        }
        while(!file.exists())
        {
            File f = file.getParentFile();
            file = SelectFileLocation("ncf",f);
        }
        LoadFileTask c_thread = new LoadFileTask(file,LoadFileTask.NOMENCLADORES);
        Thread bground_thread = new Thread(c_thread);
        bground_thread.setDaemon(true);
        bground_thread.start();
    }

    private void PrintTable()
    {
        try 
        {
            JTable table = (JTable)getPrincipalComponent();
            table.print();
        }
        catch (PrinterException ex) {
            JOptionPane.showInternalMessageDialog(getContentPane(),"Ocurrió el siguiente error durante la impresión:\n\r "+ ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void ImportFromCIFExcel()
    {
        
    }

    private void ExportExcel()
    {
        File file = SelectFileLocation("xlsx",null);
        if(file.exists())
        {
            int selected_option = JOptionPane.showInternalConfirmDialog(getContentPane(),"El fichero ya existe.\n\r Desea sobreescribirlo?");
            if(selected_option != JOptionPane.OK_OPTION)
            {
                return;
            }
        }
        try
        {
            if(!file.getName().endsWith(".xlsx"))
            {
                String name = file.getAbsolutePath()+".xlsx";
                file = new File(name);
            }
            Utils.CreateExcel(file.getAbsolutePath(), ((JTable) getPrincipalComponent()).getModel());
        }
        catch (IOException ex)
        {
            JOptionPane.showInternalMessageDialog(getContentPane(),"Ocurrió el siguiente error durante la creación del fichero:\n\r "+ ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void init()
    {
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jSAnno = new javax.swing.JSpinner();
        jLAnno = new javax.swing.JLabel();
        jPCentro = new javax.swing.JPanel();
        b_elim = new javax.swing.JButton();
        b_modif = new javax.swing.JButton();
        b_insert = new javax.swing.JButton();
        b_report = new javax.swing.JButton();
        b_graph = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMTabla = new javax.swing.JMenu();
        menu_export_excel = new javax.swing.JMenuItem();
        menu_print = new javax.swing.JMenuItem();
        jMDatos = new javax.swing.JMenu();
        export_file_menu = new javax.swing.JMenuItem();
        load_update_menu = new javax.swing.JMenuItem();
        jMAdministracion = new javax.swing.JMenu();
        nomenc_menu = new javax.swing.JMenu();
        manage_user_menu = new javax.swing.JMenuItem();
        manage_us = new javax.swing.JMenuItem();
        manage_ap = new javax.swing.JMenuItem();
        manage_efi = new javax.swing.JMenuItem();
        load_update_nomenc_menu = new javax.swing.JMenuItem();
        export_nomenc_menu = new javax.swing.JMenuItem();
        import_from_excel = new javax.swing.JMenuItem();
        close_session_menu = new javax.swing.JMenuItem();
        exit_menu = new javax.swing.JMenuItem();
        n_cat_ocup = new javax.swing.JMenuItem();
        user_inf = new javax.swing.JLabel();

        n_munic = new javax.swing.JMenuItem();
        n_prov = new javax.swing.JMenuItem();
        n_fforest = new javax.swing.JMenuItem();
        n_especie = new javax.swing.JMenuItem();
        n_signif = new javax.swing.JMenuItem();
        n_talas = new javax.swing.JMenuItem();
        n_servicios = new javax.swing.JMenuItem();
        n_prod_f_nmad = new javax.swing.JMenuItem();
        n_esp_end = new javax.swing.JMenuItem();
        n_prog_prot = new javax.swing.JMenuItem();
        n_prog_educ = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Criterios e Indicadores de Manejo Forestal Sostenible");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Criterios e Indicadores Forestales");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Cobertura Forestal");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new CIFMutableTreeNode("1.1. Total de Área cubierta",new Ind1_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.2. Índice de boscosidad",new Ind1_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.3. Relación entre el TAC y la superficie cubierta potencial",new Ind1_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.4. Efectividad de las plantaciones realizadas",new Ind1_4_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.5. Áreas pendientes por reforestar",new Ind1_5_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.6. Árboles en Áreas urbanas",new Ind1_6_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Sanidad y vitalidad de los ecosistemas forestales");
        treeNode3 = new CIFMutableTreeNode("2.1. Bosques afectados por incendios forestales",new Ind2_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("2.2. Bosques afectados por otras causas",new Ind2_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("2.3. Bosques necesitados de manejos silvícolas",new Ind2_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Contribución de los ecosistemas forestales a los servicios ambientales");
        treeNode3 = new CIFMutableTreeNode("3.1.1 Formaciones forestales representadas en Áreas Protegidas aprobadas",new Ind3_1_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.1.2 Ejecución de programas para la conservación de especies endémicas",new Ind3_1_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.1.3 Ejecución de prog. de prot. de los RGF",new Ind3_1_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.1.4 Programas de educación y extensión para la conservación de los bosques",new Ind3_1_4_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.2.1 Protección de los cuerpos de agua. Presas",new Ind3_2_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.2.2 Protección de los cuerpos de agua. Micropresas",new Ind3_2_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.2.3 Protección de los cuerpos de agua. Corrientes fluviales",new Ind3_2_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.3. Protección de la faja costera",new Ind3_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.4. Áreas afectadas por la actividad minera",new Ind3_4_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Funciones productivas de los ecosistemas");
        treeNode3 = new CIFMutableTreeNode("4.1. Índice de Rendimiento Sostenido (IRS)",new Ind4_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.2. Porcentaje de madera extraída de bosques naturales",new Ind4_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.3. Superficie de bosques bajo régimen de explotación que emplean técnicas y tecnologías inadecuadas",new Ind4_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.4. Volumen de producción de Productos Forestales No Maderables (PFNM)",new Ind4_4_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.5. Sistemas agrosilvopastoriles",new Ind4_5_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Múltiples beneficios socioeconómicos para cubrir las necesidades de la sociedad. Su mantenimiento y mejoramiento");
        treeNode3 = new CIFMutableTreeNode("5.1. Salario en el sector forestal (SM)",new Ind5_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("5.2. Ocurrencia de accidentes de trabajo",new Ind5_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("5.3. Terrenos forestales manejados para recreación y turismo, así como otras necesidades culturales y espirituales",new Ind5_4_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("5.4. Género",new Ind5_5_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree);
        jTree.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mousePressed(java.awt.event.MouseEvent evt) {
                jTreeMousePressed(evt);
            }
        });

        jLAnno.setText("Año:");

        jPCentro.setBackground(new java.awt.Color(255, 255, 255));
        jPCentro.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 153))); // NOI18N

        b_elim.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/delete_row.png")));
        b_elim.setText("Eliminar");
        b_elim.setEnabled(false);
        b_elim.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_elimMouseClicked(evt);
            }
        });

        b_modif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/edit_row.png")));
        b_modif.setText("Modificar");
        b_modif.setEnabled(false);
        b_modif.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_modifMouseClicked(evt);
            }
        });

        b_insert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/add_row.png")));
        b_insert.setText("Insertar");
        b_insert.setEnabled(false);
        b_insert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_insertMouseClicked(evt);
            }
        });

        b_report.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/find.gif")));
        b_report.setText("Reporte");
        b_report.setEnabled(false);
        b_report.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_reportMouseClicked(evt);
            }
        });

        b_graph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/graphic.png")));
        b_graph.setText("Gráficos");
        b_graph.setEnabled(false);
        b_graph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_graphMouseClicked(evt);
            }
        });

        jMTabla.setText("Tabla");

        menu_export_excel.setText("Exportar a Excel");
        menu_export_excel.setEnabled(false);
        jMTabla.add(menu_export_excel);
        menu_export_excel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ExportExcel();
            }
        });

        menu_print.setText("Imprimir");
        menu_print.setEnabled(false);
        jMTabla.add(menu_print);
        menu_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                PrintTable();
            }
        });

        jMenuBar.add(jMTabla);

        jMDatos.setText("Datos");

        export_file_menu.setText("Generar fichero de Exportación de Datos");
        export_file_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                GenerateExportDataFile();
            }
        });

        export_nomenc_menu.setText("Generar fichero de Exportación de Nomencladores");
        export_nomenc_menu.setVisible(false);
        export_nomenc_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                GenerateExportNomencFile();
            }
        });

        jMDatos.add(export_file_menu);
        jMDatos.add(export_nomenc_menu);

        load_update_menu.setText("Cargar fichero de Actualización de Datos");
        load_update_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                LoadExportDataFile();
            }
        });

        load_update_nomenc_menu.setText("Cargar fichero de Actualización de Nomencladores");
        load_update_nomenc_menu.setVisible(true);
        load_update_nomenc_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                LoadExportNomencFile();
            }
        });
        
        import_from_excel.setText("Importar Excel de CIF");
        import_from_excel.setVisible(false);
        import_from_excel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ImportFromCIFExcel();
            }
        });

        jMDatos.add(load_update_menu);
        jMDatos.add(load_update_nomenc_menu);

        jMenuBar.add(jMDatos);

        jMAdministracion.setText("Administración");

        manage_user_menu.setText("Gestionar Usuarios");
        manage_user_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageUser();
            }
        });
        manage_us.setText("Gestionar Unidades Silvícolas");
        manage_us.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageUS();
            }
        });
        manage_ap.setText("Gestionar Áreas Protegidas");
        manage_ap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageAP();
            }
        });
        manage_efi.setText("Gestionar EFI");
        manage_efi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageEFI();
            }
        });

        close_session_menu.setText("Cerrar Sesión");
        close_session_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeSession();
            }
        });

        exit_menu.setText("Salir");
        exit_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Exit();
            }
        });

        jMAdministracion.add(manage_user_menu);
        jMAdministracion.add(manage_us);
        jMAdministracion.add(manage_ap);
        jMAdministracion.add(manage_efi);

        nomenc_menu.setText("Nomencladores");
        nomenc_menu.setVisible(false);

        n_munic.setText("Gestionar Municipios");
        n_munic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageMunic();
            }
        });
        n_prov.setText("Gestionar Provincias");
        n_prov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageProv();
            }
        });
        n_fforest.setText("Gestionar Formaciones Forestales");
        n_fforest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageFF();
            }
        });
        n_especie.setText("Gestionar Especies");
        n_especie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageEspecie();
            }
        });
        n_signif.setText("Gestionar Significación de AP");
        n_signif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageSignif();
            }
        });
        n_talas.setText("Gestionar Tipo de Talas");
        n_talas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageTala();
            }
        });
        n_servicios.setText("Gestionar Servicios");
        n_servicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageServicios();
            }
        });
        n_prod_f_nmad.setText("Gestionar PFNM");
        n_prod_f_nmad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManagePFNM();
            }
        });
        n_esp_end.setText("Gestionar Especies Endémicas");
        n_esp_end.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageEE();
            }
        });
        n_prog_prot.setText("Gestionr Programas Protección");
        n_prog_prot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageProgProt();
            }
        });
        n_prog_educ.setText("Gestionar Programas Educativos");
        n_prog_educ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageProgEduc();
            }
        });

        n_cat_ocup.setText("Gestionar Categoría Ocupacional");
        n_cat_ocup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManageCatOcup();
            }
        });

        nomenc_menu.add(n_munic);
        nomenc_menu.add(n_prov);
        nomenc_menu.add(n_fforest);
        nomenc_menu.add(n_especie);
        nomenc_menu.add(n_esp_end);
        nomenc_menu.add(n_signif);
        nomenc_menu.add(n_prod_f_nmad);
        nomenc_menu.add(n_talas);
        nomenc_menu.add(n_servicios);
        nomenc_menu.add(n_prog_prot);
        nomenc_menu.add(n_prog_educ);
        nomenc_menu.add(n_cat_ocup);
        
        jMAdministracion.add(nomenc_menu);
        jMAdministracion.add(close_session_menu);
        jMAdministracion.add(exit_menu);
        jMenuBar.add(jMAdministracion);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_graph)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b_report)
                        .addGap(42, 42, 42)
                        .addComponent(b_insert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_modif)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_elim))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLAnno)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSAnno, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                                .addComponent(user_inf, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLAnno)
                    .addComponent(user_inf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPCentro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_elim)
                    .addComponent(b_modif)
                    .addComponent(b_insert)
                    .addComponent(b_report)
                    .addComponent(b_graph))
                .addContainerGap())
        );

        pack();
    }

    public void setComponent(JComponent component)
    {
        removeComponent();
        javax.swing.GroupLayout jPCentroLayout = new javax.swing.GroupLayout(jPCentro);
        jPCentro.setLayout(jPCentroLayout);
        jPCentroLayout.setHorizontalGroup(
            jPCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCentroLayout.createSequentialGroup()
                .addComponent(component, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPCentroLayout.setVerticalGroup(
            jPCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCentroLayout.createSequentialGroup()
                .addComponent(component, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        menu_print.setEnabled(false);
        menu_export_excel.setEnabled(false);
    }

    public void removeComponent()
    {
        jPCentro.removeAll();
    }

    private void initSpiner()
    {
        Calendar c = Calendar.getInstance();
        int year = c.get(Calendar.YEAR);
        SpinnerNumberModel snm = new SpinnerNumberModel(year,1900,year,1);
        jSAnno.setModel(snm);
    }

    public void ValidateComponents()
    {
        //aqui segun el tipo de usuario activar las opciones disponibles
        user = (Manage.getInstance()).getUser();
        String tipo="";
        String[] treeNodes = null;
        jSAnno.setVisible(true);
        jLAnno.setVisible(true);
        jMenuBar.setVisible(true);
        b_graph.setVisible(true);
        b_report.setVisible(true);
        initPopup();
        if(user.getType() == UserTypes.Area_Protegida || user.getType() == UserTypes.Municipal || user.getType() == UserTypes.Unidad_Silvicola || user.getType() == UserTypes.EFI)
        {
            if(user.getType() == UserTypes.Area_Protegida)
            {
                tipo = "Área Protegida";
            }
            else if(user.getType() == UserTypes.Unidad_Silvicola)
            {
                tipo = "Unidad Silvícola";
            }
            b_insert.setVisible(true);
            b_modif.setVisible(true);
            b_elim.setVisible(true);
            load_update_menu.setVisible(true);
            manage_user_menu.setVisible(false);
            export_file_menu.setVisible(true);
            if(user.getType() == UserTypes.EFI)
            {
                export_file_menu.setVisible(false);
                tipo = "EFI";
            }
            if(user.getType() == UserTypes.Municipal)
            {
                import_from_excel.setVisible(true);
            }
            load_update_nomenc_menu.setVisible(true);
            export_nomenc_menu.setVisible(false);
            manage_ap.setVisible(false);
            manage_us.setVisible(false);
            manage_efi.setVisible(false);
        }
        if(user.getType() == UserTypes.Municipal)
        {
            manage_user_menu.setVisible(true);
            b_modif.setVisible(true);
            b_elim.setVisible(true);
            manage_ap.setVisible(true);
            manage_us.setVisible(true);
            load_update_nomenc_menu.setVisible(true);
            export_nomenc_menu.setVisible(false);
            tipo = "Municipal";
            treeNodes = new String[3];
            treeNodes[0] = US;
            treeNodes[1] = AP;
            treeNodes[2] = OTROS;
        }
        if(user.getType() == UserTypes.Nacional)
        {
            manage_user_menu.setVisible(true);
            manage_ap.setVisible(true);
            manage_us.setVisible(true);
            manage_efi.setVisible(true);
            load_update_menu.setVisible(true);
            export_file_menu.setVisible(false);
            load_update_nomenc_menu.setVisible(false);
            export_nomenc_menu.setVisible(true);
            nomenc_menu.setVisible(true);
            tipo = "Nacional";
        }
        if(user.getType() == UserTypes.Provincial)
        {
            manage_user_menu.setVisible(true);
            manage_ap.setVisible(true);
            manage_us.setVisible(true);
            manage_efi.setVisible(true);
            load_update_menu.setVisible(true);
            export_file_menu.setVisible(true);
            load_update_nomenc_menu.setVisible(true);
            export_nomenc_menu.setVisible(false);
            tipo = "Provincial";
        }
        else if(user.getType() == UserTypes.Provisional)
        {
       /*     manage_user_menu.setVisible(false);
            manage_ap.setVisible(false);
            manage_us.setVisible(false);
            manage_efi.setVisible(false);*/
            b_graph.setVisible(false);
            b_report.setVisible(false);
            load_update_menu.setVisible(false);
            export_file_menu.setVisible(false);
            load_update_nomenc_menu.setVisible(true);
            jMTabla.setVisible(false);
            manage_user_menu.setVisible(false);
            manage_us.setVisible(false);
            manage_ap.setVisible(false);
            manage_efi.setVisible(false);
            nomenc_menu.setVisible(false);
            export_nomenc_menu.setVisible(false);
            nomenc_menu.setVisible(false);
            tipo = "Provisional";
        }
        user_inf.setText("Usuario: "+user.getUser() +"         Entidad: "+tipo);
        if(user.getType() == UserTypes.Area_Protegida || user.getType() == UserTypes.Municipal || user.getType() == UserTypes.Unidad_Silvicola)
        {
            TreeModel tm = jTree.getModel();
            DefaultMutableTreeNode result = UpdateTree((DefaultMutableTreeNode)tm.getRoot(),treeNodes);
            jTree.setModel(new javax.swing.tree.DefaultTreeModel(result));
        }
        if(user.getType() != UserTypes.Provisional)
        {
            jTree.setVisible(true);
            jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        }
    }

    private DefaultMutableTreeNode UpdateTree(DefaultMutableTreeNode root, String[] leafs)
    {
        DefaultMutableTreeNode result;
        if(root.isLeaf())
        {
            result = new CIFMutableTreeNode(root.getUserObject(), ((CIFMutableTreeNode)root).getManageObject().Clone());
            Manejable man = ((CIFMutableTreeNode)root).getManageObject();
            Manejable clone;
            if(!root.getUserObject().toString().equals("3.1.1 Formaciones forestales representadas en Áreas Protegidas aprobadas"))
            {
                if(leafs != null)
                {
                    for(int i=0; i<leafs.length; i++)
                    {
                        if(leafs[i].equals(US))
                        {
                            clone = man.Clone();
                            clone.setBaseUnits(BaseUnits.Unidad_Silvicola);
                        }
                        else if(leafs[i].equals(AP))
                        {
                            clone = man.Clone();
                            clone.setBaseUnits(BaseUnits.Area_Protegida);
                        }
                        else
                        {
                            clone = man.Clone();
                            clone.setBaseUnits(BaseUnits.Otros);
                        }
                        result.add(new CIFMutableTreeNode(leafs[i],clone));
                    }
                }
                else if(user.getType() == UserTypes.Area_Protegida)
                {
                    clone = man.Clone();
                    clone.setBaseUnits(BaseUnits.Area_Protegida);
                    result = new CIFMutableTreeNode(root.getUserObject(), clone);
                }
                else if(user.getType() == UserTypes.Unidad_Silvicola)
                {
                    clone = man.Clone();
                    clone.setBaseUnits(BaseUnits.Unidad_Silvicola);
                    result = new CIFMutableTreeNode(root.getUserObject(), clone);
                }
            }
            else
            {
                clone = man.Clone();
                clone.setBaseUnits(BaseUnits.Area_Protegida);
                result = new CIFMutableTreeNode(root.getUserObject(), clone);
            }
            return result;
        }
        result = new DefaultMutableTreeNode(root.getUserObject());
        int count = root.getChildCount();
        for(int i=0; i<count; i++)
        {
            result.add(UpdateTree((DefaultMutableTreeNode)root.getChildAt(i),leafs));
        }
        return result;
    }

    private void initPopup()
    {
        basico = new javax.swing.JCheckBoxMenuItem("Básico", true);
        basico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                DeselectMenus(basico);
                report = Report_Value.BASIC;
            }
        });
        unit_base = new javax.swing.JCheckBoxMenuItem("Por Unidades de Base");
        unit_base.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                DeselectMenus(unit_base);
                report = Report_Value.BASE_UNITS;
            }
        });
        munic = new javax.swing.JCheckBoxMenuItem("Por Municipios");
        munic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                DeselectMenus(munic);
                report = Report_Value.MUNICIPIOS;
            }
        });
        prov = new javax.swing.JCheckBoxMenuItem("Por Provincias");
        prov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                DeselectMenus(prov);
                report = Report_Value.PROVINCIAS;
            }
        });

        User user = Manage.getInstance().getUser();
        popup.add(basico);
        if(user.getType() == UserTypes.EFI || user.getType() == UserTypes.Municipal)
        {
            popup.add(unit_base);
        }
        else if(user.getType() == UserTypes.Provincial)
        {
            popup.add(unit_base);
            popup.add(munic);
        }
        else
        {
            popup.add(unit_base);
            popup.add(munic);
            popup.add(prov);
        }
    }

    public int getSelectedYear()
    {
        return Integer.parseInt(jSAnno.getValue().toString());
    }

    private void DeselectMenus(JComponent component)
    {
        //component es el menu seleccionado, se desmarcan todos los demas menos ese
        int count = popup.getComponentCount();
        int pos = popup.getComponentIndex(component);
        for(int i=0; i<count; i++)
        {
            if(pos != i)
            {
                ((JCheckBoxMenuItem)popup.getComponent(i)).setSelected(false);
            }
            else
            {
                ((JCheckBoxMenuItem)component).setSelected(true);
            }
        }
    }

    private void ManageUser()
    {
        manejable = new UserManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageUS()
    {
        manejable = new USManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageAP()
    {
        manejable = new APManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageEFI()
    {
        manejable = new EFIManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageMunic()
    {
        manejable = new MunicManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageProv()
    {
        manejable = new ProvManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageFF()
    {
        manejable = new FFManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageEE()
    {
        manejable = new EEManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageSignif()
    {
        manejable = new SignifManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageTala()
    {
        manejable = new TalasManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageServicios()
    {
        manejable = new ServiciosManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManagePFNM()
    {
        manejable = new PFNMManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageProgProt()
    {
        manejable = new ProgProtManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageProgEduc()
    {
        manejable = new ProgEducManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageEspecie()
    {
        manejable = new EspecieManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void ManageCatOcup()
    {
        manejable = new CategManejable(this);
        JTable tm = manejable.Report();
        setTable(tm);
        b_insert.setVisible(true);
        b_modif.setVisible(true);
        b_insert.setEnabled(true);
        b_modif.setEnabled(true);
        b_elim.setVisible(true);
        b_elim.setEnabled(true);
        b_report.setEnabled(true);
    }

    private void setTable(JTable tm)
    {
        table = tm;
      //  JTable table = new JTable(tm);
      //  tm.addMouseListenerToHeaderInTable(table);
      //   tm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane jsp = new JScrollPane();
        jsp.setViewportView(tm);
     //   jsp.getViewport().setBackground(Color.WHITE);
        jsp.setPreferredSize(new Dimension(jPCentro.getSize().width-10, jPCentro.getSize().height-10));
        setComponent(jsp);
        menu_print.setEnabled(true);
        menu_export_excel.setEnabled(true);
//        tm.getColumnModel().getColumn(0).setWidth(tm.getColumnModel().getColumn(0).getWidth()+1000);
    }

    public Component getPrincipalComponent()
    {
      //  System.out.println(((JScrollPane)jPCentro.getComponents()[0]).getViewport().getView().toString());
        if(jPCentro.getComponents().length == 0)
        {
            return null;
        }
        Component comp = (JComponent)jPCentro.getComponents()[0];
        if(comp instanceof JScrollPane)
        {
            return ((JScrollPane)comp).getViewport().getView();
        }
        return comp;
    }

    public void addChangeListenerToJSpinner(ChangeListener listener)
    {
        jSAnno.addChangeListener(listener);
    }

    private File SelectFileLocation(String ext,File currentDirectory)
    {
        JFileChooser fc;
        if(currentDirectory == null)
        {
            fc = new JFileChooser();
        }
        else
        {
            fc = new JFileChooser(currentDirectory);
        }
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Fichero de exportación de datos", ext);
        fc.setFileFilter(filter);
        int returnVal = fc.showDialog(this, "Aceptar");
        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            return fc.getSelectedFile();
        }
        return null;
    }

    private void Exit()
    {
        this.dispose();
    }

    private void closeSession()
    {
        removeComponent();
        jTree = new javax.swing.JTree();
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Criterios e Indicadores Forestales");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Cobertura Forestal");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new CIFMutableTreeNode("1.1. Total de Área cubierta",new Ind1_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.2. Índice de boscosidad",new Ind1_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.3. Relación entre el TAC y la superficie cubierta potencial",new Ind1_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.4. Efectividad de las plantaciones realizadas",new Ind1_4_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.5. Áreas pendientes por reforestar",new Ind1_5_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("1.6. Árboles en Áreas urbanas",new Ind1_6_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Sanidad y vitalidad de los ecosistemas forestales");
        treeNode3 = new CIFMutableTreeNode("2.1. Bosques afectados por incendios forestales",new Ind2_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("2.2. Bosques afectados",new Ind2_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("2.3. Bosques necesitados de manejos silvícolas",new Ind2_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Contribución de los ecosistemas forestales a los servicios ambientales");
        treeNode3 = new CIFMutableTreeNode("3.1.1 Formaciones forestales representadas en Áreas Protegidas aprobadas",new Ind3_1_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.1.2 Ejecución de programas para la conservación de especies endémicas",new Ind3_1_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.1.3 Ejecución de programas protección de los recursos genéticos forestales",new Ind3_1_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.1.4 Programas de educación y extensión para la conservación de los bosques",new Ind3_1_4_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.2.1 Protección de los cuerpos de agua. Presas",new Ind3_2_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.2.2 Protección de los cuerpos de agua. Micropresas",new Ind3_2_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.2.3 Protección de los cuerpos de agua. Corrientes fluviales",new Ind3_2_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.3. Protección de la faja costera",new Ind3_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("3.4. Áreas afectadas por la actividad minera",new Ind3_4_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Funciones productivas de los ecosistemas");
        treeNode3 = new CIFMutableTreeNode("4.1. Índice de Rendimiento Sostenido (IRS)",new Ind4_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.2. Porcentaje de madera extraída de bosques naturales",new Ind4_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.3. Superficie de bosques bajo régimen de explotación que emplean técnicas y tecnologías inadecuadas",new Ind4_3_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.4. Volumen de producción de Productos Forestales No Maderables (PFNM)",new Ind4_4_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("4.5. Sistemas agrosilvopastoriles",new Ind4_5_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Múltiples beneficios socioeconómicos para cubrir las necesidades de la sociedad. Su mantenimiento y mejoramiento");
        treeNode3 = new CIFMutableTreeNode("5.1. Salario en el sector forestal (SM)",new Ind5_1_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("5.2. Ocurrencia de accidentes de trabajo",new Ind5_2_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("5.3. Terrenos forestales manejados para recreación y turismo, así como otras necesidades culturales y espirituales",new Ind5_4_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode3 = new CIFMutableTreeNode("5.4. Género",new Ind5_5_Manejable(this));
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree);
        jTree.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mousePressed(java.awt.event.MouseEvent evt) {
                jTreeMousePressed(evt);
            }
        });
        jSAnno.setVisible(false);
        jLAnno.setVisible(false);
        jMenuBar.setVisible(false);
        b_graph.setVisible(false);
        b_report.setVisible(false);
        b_insert.setVisible(false);
        b_modif.setVisible(false);
        b_elim.setVisible(false);
        b_graph.setEnabled(false);
        b_report.setEnabled(false);
        b_insert.setEnabled(false);
        b_modif.setEnabled(false);
        b_elim.setEnabled(false);
        jTree.setVisible(false);
        menu_export_excel.setEnabled(false);
        menu_print.setEnabled(false);
        nomenc_menu.setVisible(false);
        jMTabla.setVisible(true);
        user_inf.setText("");
        popup = new JPopupMenu();
        initSpiner();
        LoginDialog ld = new LoginDialog(this);
        ld.setModalityType(ModalityType.APPLICATION_MODAL);
        ld.setVisible(true);
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JF_Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_elim;
    private javax.swing.JButton b_graph;
    private javax.swing.JButton b_insert;
    private javax.swing.JButton b_modif;
    private javax.swing.JButton b_report;
    private javax.swing.JMenuItem export_file_menu;
    private javax.swing.JLabel jLAnno;
    private javax.swing.JMenu jMAdministracion;
    private javax.swing.JMenu jMDatos;
    private javax.swing.JMenu jMTabla;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JPanel jPCentro;
    private javax.swing.JSpinner jSAnno;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree;
    private javax.swing.JMenuItem load_update_menu;
    private javax.swing.JMenuItem manage_user_menu;
    private javax.swing.JMenuItem menu_export_excel;
    private javax.swing.JMenuItem menu_print;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JMenuItem manage_us;
    private javax.swing.JMenuItem manage_ap;
    private javax.swing.JMenuItem manage_efi;
    private javax.swing.JMenuItem load_update_nomenc_menu;
    private javax.swing.JMenuItem export_nomenc_menu;
    private javax.swing.JMenuItem import_from_excel;
    private javax.swing.JMenuItem close_session_menu;
    private javax.swing.JMenuItem exit_menu;
    private javax.swing.JMenuItem nomenc_menu;

    private javax.swing.JMenuItem n_munic;
    private javax.swing.JMenuItem n_prov;
    private javax.swing.JMenuItem n_fforest;
    private javax.swing.JMenuItem n_especie;
    private javax.swing.JMenuItem n_signif;
    private javax.swing.JMenuItem n_talas;
    private javax.swing.JMenuItem n_servicios;
    private javax.swing.JMenuItem n_prod_f_nmad;
    private javax.swing.JMenuItem n_esp_end;
    private javax.swing.JMenuItem n_prog_prot;
    private javax.swing.JMenuItem n_prog_educ;
    private javax.swing.JMenuItem n_cat_ocup;

    private javax.swing.JLabel user_inf;
}
